import superjason from "superjson";
import { GetServerSideProps, type NextPage } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import Head from "next/head";
import Nav from "@/components/Nav";

import type { Category, Equipment, Location } from "@/types/models";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { api } from "@/utils/api";
import Image from "next/image";
import { formatPrice } from "@/lib/utils";
import { useBoundStore } from "@/zustand/store";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import Calendar from "react-calendar";
import { Value } from "react-calendar/dist/cjs/shared/types";
import { Dispatch, SetStateAction, useState } from "react";
import Cart from "@/components/Cart";

type Props = {
  locations: Location[];
  categories: Category[];
};

const Home: NextPage<Props> = ({ locations, categories }: Props) => {
  const [sort, setSort] = useState<string>("default");
  const [category, setCategory] = useState<string>("");
  const [location, setLocation] = useState<string>("");

  const equipments = api.equipment.getAllEquipment.useQuery({
    sort,
    category,
    location,
  });

  if (!equipments.data) return <div>404</div>;

  return (
    <>
      <Head>
        <title>Guanaco Rental</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo-favicon.ico" />
      </Head>

      <Cart />

      <Nav />

      <main className="min-h-screen bg-app-bg px-6 pt-[70px]">
        <div className="mx-auto max-w-7xl ">
          <section className="mt-12 grid grid-cols-12 gap-4">
            <LeftBar
              locations={locations}
              categories={categories}
              setCategory={setCategory}
              setLocation={setLocation}
              selectedCategory={category}
            />
            <div className="col-span-9 flex flex-col gap-4">
              <section className="flex gap-4 rounded-sm bg-white p-4 shadow-sm">
                <Input type="search" placeholder="Buscar equipos" />
                <SelectOrder setSort={setSort} />
              </section>
              <section className="grid grid-cols-[repeat(auto-fit,minmax(14rem,1fr))] gap-8">
                {equipments.data.map((equipment) => (
                  <EquipmentCard key={equipment.id} equipment={equipment} />
                ))}
              </section>
            </div>
          </section>
        </div>
      </main>
    </>
  );
};

type LeftBarProps = {
  locations: Location[];
  categories: Category[];
  setCategory: Dispatch<SetStateAction<string>>;
  setLocation: Dispatch<SetStateAction<string>>;
  selectedCategory: string;
};

const LeftBar = ({
  categories,
  locations,
  setCategory,
  setLocation,
  selectedCategory,
}: LeftBarProps) => {
  const setStartDate = useBoundStore((state) => state.setStartDate);
  const setEndDate = useBoundStore((state) => state.setEndDate);

  const handleDateChange = (e: Value) => {
    if (e && Array.isArray(e)) {
      setStartDate(e[0]);
      setEndDate(e[1]);
    }
  };

  return (
    <section className="col-span-3 grid gap-4 rounded bg-white p-4 shadow-sm">
      <SelectLocation locations={locations} setLocation={setLocation} />

      <Dialog>
        <DialogTrigger asChild>
          <Button size="sm">Seleccionar Fecha</Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Selecciona tu fecha de alquiler</DialogTitle>
            <DialogDescription>
              selecciona primero la fecha de inicio y luego la fecha final.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-center py-4">
            <Calendar
              selectRange={true}
              locale="es-ES"
              minDate={new Date()}
              onChange={(e) => handleDateChange(e)}
            />
          </div>
          <DialogFooter>footer</DialogFooter>
        </DialogContent>
      </Dialog>

      <div>
        <p>Retiro:</p>
        <p>Devolución:</p>
      </div>

      <div className="grid gap-2">
        <p className="font-semibold">Categorías:</p>
        <ul className="grid gap-2">
          <li
            onClick={() => setCategory("")}
            className={`cursor-pointer rounded-sm px-2 py-1 ${
              !selectedCategory
                ? "bg-brand-secondary font-semibold text-white"
                : ""
            }`}
          >
            Todos
          </li>
          {categories.map((category) => (
            <li
              key={category.id}
              onClick={() => setCategory(category.id)}
              className={`cursor-pointer rounded-sm px-2 py-1 ${
                selectedCategory === category.id
                  ? "bg-brand-secondary font-semibold text-white"
                  : ""
              }`}
            >
              {category.name}
            </li>
          ))}
        </ul>
      </div>
    </section>
  );
};

type SelectLocationProps = {
  locations: Location[];
  setLocation: Dispatch<SetStateAction<string>>;
};

const SelectLocation = ({ locations, setLocation }: SelectLocationProps) => {
  return (
    <div className="flex items-center gap-2">
      {/* <Label htmlFor="location">Sucursal:</Label> */}
      <Select onValueChange={(e) => setLocation(e)}>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Elegir sucursal" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            <SelectLabel>Sucursales</SelectLabel>
            {locations.map((location) => (
              <SelectItem value={location.id} key={location.id}>
                {location.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
    </div>
  );
};

const SelectOrder = ({
  setSort,
}: {
  setSort: Dispatch<SetStateAction<string>>;
}) => {
  return (
    <div className="flex items-center gap-2">
      {/* <Label htmlFor="location">Sucursal:</Label> */}
      <Select onValueChange={(e) => setSort(e)}>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Ordenar por precio" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            <SelectLabel>Precio</SelectLabel>
            <SelectItem value="default">Default</SelectItem>
            <SelectItem value="asc">Ascendente</SelectItem>
            <SelectItem value="desc">Descendente</SelectItem>
          </SelectGroup>
        </SelectContent>
      </Select>
    </div>
  );
};

type EquipmentCardProps = {
  equipment: Equipment;
};
const EquipmentCard = ({ equipment }: EquipmentCardProps) => {
  const cartItems = useBoundStore((state) => state.cartItems);
  const addToCart = useBoundStore((state) => state.addToCart);
  const openCartModal = useBoundStore((state) => state.setOpenCartModal);

  const isAlreadyInCart = !!cartItems.find((item) => item.id === equipment.id);

  const handleAddToCart = (isAlreadyInCart: boolean, equipment: Equipment) => {
    if (isAlreadyInCart) return;

    addToCart(equipment);

    if (cartItems.length === 0) openCartModal();
  };

  return (
    <article className="grid gap-2 rounded-sm bg-white p-4 shadow-sm">
      <div className="relative h-[200px] w-auto">
        <Image
          src={equipment.image}
          alt={`${equipment.name} ${equipment.brand} equipment picture`}
          fill
          style={{ objectFit: "contain" }}
        />
      </div>

      <div>
        <p className="font-bold">
          {equipment.name} {equipment.brand}
        </p>
        <p>{equipment.model}</p>
      </div>

      <div className="flex items-center justify-end gap-2">
        <p>Disponible</p>
        <Button size="sm" variant="darklink">
          ver más
        </Button>
      </div>

      <div className="flex items-center justify-between">
        <p className="text-lg font-bold">{formatPrice(equipment.price)}</p>
        <Button
          size="sm"
          variant="secondary"
          onClick={() => handleAddToCart(isAlreadyInCart, equipment)}
        >
          {isAlreadyInCart ? "Agregado" : "Agregar"}
        </Button>
      </div>
    </article>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session: null },
    transformer: superjason,
  });

  const categories = await prisma.category.findMany({});
  const locations = await prisma.location.findMany({});

  await helpers.equipment.getAllEquipment.prefetch({ sort: "" });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      categories,
      locations,
    },
  };
};

export default Home;
