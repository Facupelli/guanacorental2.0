import superjason from "superjson";
import { GetServerSideProps, type NextPage } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import Head from "next/head";
import Nav from "@/components/Nav";

import type { Category, Equipment, Location } from "@/types/models";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

type Props = {
  locations: Location[];
  categories: Category[];
  equipments: Equipment[];
};

const Home: NextPage<Props> = ({
  locations,
  categories,
  equipments,
}: Props) => {
  return (
    <>
      <Head>
        <title>Guanaco Rental</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo-favicon.ico" />
      </Head>

      <Nav />

      <main className="min-h-screen bg-app-bg pt-[70px]">
        <div className="mx-auto max-w-7xl ">
          <section className="mt-12 grid grid-cols-12 gap-4">
            <LeftBar locations={locations} categories={categories} />
            <div className="col-span-9">
              <section className="flex gap-4 rounded-sm bg-white p-4 shadow-sm">
                <Input type="search" placeholder="Buscar equipos" />
                <SelectOrder />
              </section>
              <section>hola</section>
            </div>
          </section>
        </div>
      </main>
    </>
  );
};

type LeftBarProps = {
  locations: Location[];
  categories: Category[];
};

const LeftBar = ({ categories, locations }: LeftBarProps) => {
  return (
    <section className="col-span-3 grid gap-4 rounded bg-white p-4 shadow-sm">
      <SelectLocation locations={locations} />

      <Button size="sm">SELECCIONAR FECHA</Button>

      <div>
        <p>Retiro:</p>
        <p>Devolución:</p>
      </div>

      <div className="grid gap-2">
        <Label>Categoría:</Label>
        <ul className="grid gap-2">
          {categories.map((category) => (
            <li key={category.id}>{category.name}</li>
          ))}
        </ul>
      </div>
    </section>
  );
};

type SelectLocationProps = {
  locations: Location[];
};

const SelectLocation = ({ locations }: SelectLocationProps) => {
  return (
    <div className="flex items-center gap-2">
      {/* <Label htmlFor="location">Sucursal:</Label> */}
      <Select>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Elegir sucursal" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            <SelectLabel>Sucursales</SelectLabel>
            {locations.map((location) => (
              <SelectItem value={location.name} key={location.id}>
                {location.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
    </div>
  );
};

const SelectOrder = () => {
  return (
    <div className="flex items-center gap-2">
      {/* <Label htmlFor="location">Sucursal:</Label> */}
      <Select>
        <SelectTrigger className="w-[180px]">
          <SelectValue placeholder="Ordenar por precio" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            <SelectLabel>Precio</SelectLabel>
            <SelectItem value="default">Default</SelectItem>
            <SelectItem value="desc">Descendente</SelectItem>
            <SelectItem value="asc">Ascendente</SelectItem>
          </SelectGroup>
        </SelectContent>
      </Select>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session: null },
    transformer: superjason,
  });

  const categories = await prisma.category.findMany({});
  const locations = await prisma.location.findMany({});

  await helpers.equipment.getAllEquipment.prefetch({ name: "" });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      categories,
      locations,
    },
  };
};

export default Home;
