import { type UseFormSetValue, useForm } from "react-hook-form";
import { useRouter } from "next/router";
import Head from "next/head";
import { ReactElement, useState } from "react";
import { type NextPage } from "next";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import Pagination from "@/components/ui/Pagination";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

import { api } from "@/utils/api";

import { Button } from "@/components/ui/button";
import DataTable from "@/components/ui/data-table";

import { type Prisma, type Role } from "@prisma/client";
import type { Columns } from "@/types/table";
import { MoreHorizontal } from "lucide-react";
import Link from "next/link";

type User = Prisma.UserGetPayload<{
  include: {
    role: true;
    address: true;
    orders: true;
  };
}>;

type CellProps = {};

const userColumns: Columns<User, CellProps>[] = [
  {
    title: "Alta",
    cell: (rowData) => (
      <div>{rowData.address?.created_at.toLocaleDateString()}</div>
    ),
  },
  { title: "Nombre", cell: (rowData) => <div>{rowData.name}</div> },
  { title: "TelÃ©fono", cell: (rowData) => <div>{rowData.address?.phone}</div> },
  { title: "DNI", cell: (rowData) => <div>{rowData.address?.dni_number}</div> },
  {
    title: "Provincia",
    cell: (rowData) => <div>{rowData.address?.province}</div>,
  },
  { title: "Pedidos", cell: (rowData) => <div>{rowData.orders.length}</div> },
  {
    title: "",
    cell: (rowData) => <ActionsDropMenu user={rowData} />,
  },
];

const AdminUsers: NextPage = () => {
  const router = useRouter();
  const [userSelected, setUser] = useState<User | null>(null);

  const { watch, setValue } = useForm<{ roleId: string }>();
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const roleId = watch("roleId");

  const roles = api.role.getAllRoles.useQuery();
  const { data, isLoading } = api.user.getAllUsers.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    roleId,
  });

  const handleCreateUser = () => {
    void router.push("/new-user");
  };

  const handleClickUser = (userId: string) => {
    void router.push(`/admin/users/${userId}`);
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Clientes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">CLIENTES</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex">
              <div className="flex w-1/2 items-center gap-4 rounded-md bg-white p-4">
                <Label className="whitespace-nowrap">Rol del cliente</Label>
                {roles.data && (
                  <SelectRole roles={roles.data} setValue={setValue} />
                )}
              </div>
              <div className="ml-auto">
                <Button onClick={handleCreateUser}>Crear Cliente</Button>
              </div>
            </div>

            {data?.users && (
              <DataTable
                data={data.users}
                setRowData={setUser}
                columns={userColumns}
              />
            )}

            <Pagination
              totalCount={data?.totalCount ?? 0}
              currentPage={currentPage}
              pageSize={pageSize}
              onPageChange={(page) => setCurrentPage(page as number)}
            />
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

const SelectRole = ({
  roles,
  setValue,
}: {
  roles: Role[];
  setValue: UseFormSetValue<{ roleId: string }>;
}) => {
  return (
    <Select onValueChange={(e) => setValue("roleId", e)}>
      <SelectTrigger>
        <SelectValue placeholder="seleccionar rol" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Sucursales</SelectLabel>
          {roles.map((role) => (
            <SelectItem value={role.id} key={role.id}>
              {role.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

const ActionsDropMenu = ({ user }: { user: User }) => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>Acciones</DropdownMenuLabel>
        <DropdownMenuItem>
          <Link href={`/admin/users/${user.id}`}>Ver detalle</Link>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default AdminUsers;
