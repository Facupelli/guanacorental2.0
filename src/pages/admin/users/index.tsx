import { type UseFormSetValue, useForm } from "react-hook-form";
import { useRouter } from "next/router";
import Head from "next/head";
import { useState } from "react";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import Pagination from "@/components/ui/Pagination";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";

import { api } from "@/utils/api";

import { Prisma, type Role } from "@prisma/client";
import { type NextPage } from "next";
import { Button } from "@/components/ui/button";
import { ColumnDef } from "@tanstack/react-table";
import { DataTable } from "@/components/ui/data-table";

type User = Prisma.UserGetPayload<{
  include: {
    role: true;
    address: true;
    orders: true;
  };
}>;

const userColumns: ColumnDef<User>[] = [
  {
    id: "alta",
    header: "Alta",
    accessorFn: (row) => row.address?.created_at.toLocaleDateString(),
  },
  { id: "fullName", accessorFn: (row) => row.name, header: "Nombre" },
  {
    id: "retiro",
    header: "Teléfono",
    accessorFn: (row) => row.address?.phone,
  },
  {
    id: "devolución",
    header: "DNI",
    accessorFn: (row) => row.address?.dni_number,
  },
  {
    id: "location",
    header: "Provincia",
    accessorFn: (row) => row.address?.province,
  },
  {
    id: "orders",
    header: "Pedidos",
    accessorFn: (row) => row.orders.length,
  },
  // {
  //   id: "actions",
  //   cell: ({ row }) => {
  //     const order = row.original;

  //     return <ActionsDropMenu />;
  //   },
  // },
];

const AdminUsers: NextPage = () => {
  const router = useRouter();
  const { watch, setValue } = useForm<{ roleId: string }>();
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const roleId = watch("roleId");

  const roles = api.role.getAllRoles.useQuery();
  const { data, isLoading } = api.user.getAllUsers.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    roleId,
  });

  const handleCreateUser = () => {
    void router.push("/new-user");
  };

  const handleClickUser = (userId: string) => {
    void router.push(`/admin/users/${userId}`);
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Clientes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">CLIENTES</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex">
              <div className="flex w-1/2 items-center gap-4 rounded-md bg-white p-4">
                <Label className="whitespace-nowrap">Rol del cliente</Label>
                {roles.data && (
                  <SelectRole roles={roles.data} setValue={setValue} />
                )}
              </div>
              <div className="ml-auto">
                <Button onClick={handleCreateUser}>Crear Cliente</Button>
              </div>
            </div>

            {data?.users && (
              <DataTable
                data={data?.users}
                columns={userColumns}
                getRowCanExpand={() => false}
              />
            )}

            <Pagination
              totalCount={data?.totalCount ?? 0}
              currentPage={currentPage}
              pageSize={pageSize}
              onPageChange={(page) => setCurrentPage(page as number)}
            />
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

const SelectRole = ({
  roles,
  setValue,
}: {
  roles: Role[];
  setValue: UseFormSetValue<{ roleId: string }>;
}) => {
  return (
    <Select onValueChange={(e) => setValue("roleId", e)}>
      <SelectTrigger>
        <SelectValue placeholder="seleccionar rol" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Sucursales</SelectLabel>
          {roles.map((role) => (
            <SelectItem value={role.id} key={role.id}>
              {role.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export default AdminUsers;
