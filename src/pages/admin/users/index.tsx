import { type UseFormSetValue, useForm } from "react-hook-form";
import { useRouter } from "next/router";
import Head from "next/head";
import { useState } from "react";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import Table from "@/components/ui/table";
import Pagination from "@/components/ui/Pagination";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";

import { api } from "@/utils/api";

import { type Role } from "@prisma/client";
import { type NextPage } from "next";
import { Button } from "@/components/ui/button";

const columns = [
  { title: "Alta" },
  { title: "Nombre" },
  { title: "TelÃ©fono" },
  { title: "DNI" },
  { title: "Provincia" },
  { title: "Pedidos" },
];

const AdminUsers: NextPage = () => {
  const router = useRouter();
  const { watch, setValue } = useForm<{ roleId: string }>();
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const roleId = watch("roleId");

  const roles = api.role.getAllRoles.useQuery();
  const { data, isLoading } = api.user.getAllUsers.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    roleId,
  });

  const handleCreateUser = () => {
    void router.push("/new-user");
  };

  const handleClickUser = (userId: string) => {
    void router.push(`/admin/users/${userId}`);
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Clientes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">CLIENTES</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex">
              <div className="flex w-1/2 items-center gap-4 rounded-md bg-white p-4">
                <Label className="whitespace-nowrap">Rol del cliente</Label>
                {roles.data && (
                  <SelectRole roles={roles.data} setValue={setValue} />
                )}
              </div>
              <div className="ml-auto">
                <Button onClick={handleCreateUser}>Crear Cliente</Button>
              </div>
            </div>
            <Table headTitles={columns}>
              {data?.users.length === 0 ? (
                <tr>
                  <td className="py-5" colSpan={12}>
                    No hay usuarios
                  </td>
                </tr>
              ) : (
                data?.users.map((user) => (
                  <tr
                    key={user.id}
                    className="cursor-pointer text-sm"
                    onClick={() => handleClickUser(user.id)}
                  >
                    <td className="py-4 ">
                      {user.address?.created_at &&
                        new Date(user.address?.created_at).toLocaleDateString(
                          "es-AR",
                          {
                            year: "numeric",
                            day: "numeric",
                            month: "short",
                          }
                        )}
                    </td>
                    <td className="py-4">{user.name}</td>
                    <td className="py-4">{user.address?.phone}</td>
                    <td className="py-4">{user.address?.dni_number}</td>
                    <td className="py-4">{user.address?.province}</td>
                    <td className="py-4">{user.orders.length}</td>
                  </tr>
                ))
              )}
              {isLoading && (
                <tr>
                  <td className="py-5" colSpan={12}>
                    Cargando...
                  </td>
                </tr>
              )}
            </Table>

            <Pagination
              totalCount={data?.totalCount ?? 0}
              currentPage={currentPage}
              pageSize={pageSize}
              onPageChange={(page) => setCurrentPage(page as number)}
            />
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

const SelectRole = ({
  roles,
  setValue,
}: {
  roles: Role[];
  setValue: UseFormSetValue<{ roleId: string }>;
}) => {
  return (
    <Select onValueChange={(e) => setValue("roleId", e)}>
      <SelectTrigger>
        <SelectValue placeholder="seleccionar rol" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Sucursales</SelectLabel>
          {roles.map((role) => (
            <SelectItem value={role.id} key={role.id}>
              {role.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export default AdminUsers;
