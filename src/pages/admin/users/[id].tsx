import superjason from "superjson";
import { getServerSession } from "next-auth";
import { useRouter } from "next/router";
import Image from "next/image";
import { type UseFormSetValue, useForm } from "react-hook-form";
import { prisma } from "@/server/db";
import { type GetServerSideProps, type NextPage } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { authOptions } from "@/server/auth";
import Head from "next/head";
import { useState } from "react";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import OrderRow from "@/components/OrderRow";
import Pagination from "@/components/ui/Pagination";
import Table from "@/components/ui/Table";
import { Input } from "@/components/ui/input";
import { CheckSquare, EditIcon } from "lucide-react";

import { api } from "@/utils/api";
import { orderTableColumns } from "@/lib/utils";

type UserForm = {
  name: string;
};

const AdminUserDetail: NextPage = () => {
  const router = useRouter();
  const { getValues, register } = useForm<UserForm>();

  const [editProfile, setEditProfile] = useState(false);

  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const ctx = api.useContext();
  const { data, isLoading } = api.user.getUserById.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    userId: router.query.id as string,
  });

  const { mutate } = api.user.editUser.useMutation();

  const handleConfirmEdit = () => {
    const editData = getValues();

    if (data?.user.id) {
      mutate(
        { ...editData, userId: data.user.id },
        {
          onSuccess: () => {
            setEditProfile(false);
            void ctx.user.getUserById.invalidate();
          },
        }
      );
    }
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Clientes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">CLIENTES DETALLE</h1>
          <div className="grid gap-6 pt-6">
            <div className="grid gap-6 rounded-md bg-white p-6">
              <section className="flex rounded-md border border-app-bg p-4">
                <div className="flex items-center gap-6">
                  {data?.user.image && (
                    <div className="relative h-20 w-20 rounded-full">
                      <Image
                        src={data?.user.image}
                        alt="user picure"
                        fill
                        style={{ objectFit: "cover", borderRadius: "100%" }}
                      />
                    </div>
                  )}
                  <div className="grid">
                    {editProfile ? (
                      <Input
                        type="text"
                        defaultValue={data?.user.name ?? ""}
                        {...register("name")}
                      />
                    ) : (
                      <h2 className="text-xl font-bold">{data?.user.name}</h2>
                    )}
                    <p>{data?.user.email}</p>
                    <div className="flex gap-2 text-sm">
                      <p>{data?.user.address?.province}</p>
                      <p>{data?.user.address?.city}</p>
                    </div>
                  </div>
                </div>
                <div className="ml-auto">
                  {editProfile ? (
                    <CheckSquare
                      className="h-5 w-5 cursor-pointer text-green-400"
                      onClick={handleConfirmEdit}
                    />
                  ) : (
                    <EditIcon
                      className="h-5 w-5 cursor-pointer"
                      onClick={() => setEditProfile(true)}
                    />
                  )}
                </div>
              </section>
              <section className="grid gap-6 rounded-md border border-app-bg p-4">
                <h5 className="text-lg font-semibold">Información personal</h5>
                <div className="grid grid-cols-3 gap-4">
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Teléfono</p>
                    <p>{data?.user.address?.phone}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">DNI</p>
                    <p>{data?.user.address?.dni_number}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Dirección</p>
                    <p>{data?.user.address?.address_1}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Ocupacción</p>
                    <p>{data?.user.address?.occupation}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Estudiante</p>
                    <p>{data?.user.address?.student ? "Si" : "No"}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Empleado</p>
                    <p>{data?.user.address?.employee ? "Si" : "No"}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Empresa</p>
                    <p>{data?.user.address?.company}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Cuit</p>
                    <p>{data?.user.address?.cuit}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Razón social</p>
                    <p>{data?.user.address?.bussines_name}</p>
                  </div>
                </div>
              </section>

              <section className="grid gap-6 rounded-md border border-app-bg p-4">
                <h5 className="text-lg font-semibold">Información del banco</h5>
                <div className="grid grid-cols-3 gap-4">
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Banco</p>
                    <p>{data?.user.address?.bank}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Alias</p>
                    <p>{data?.user.address?.alias}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">cbu</p>
                    <p>{data?.user.address?.cbu}</p>
                  </div>
                </div>
              </section>

              <section className="grid rounded-md border border-app-bg ">
                <h5 className="p-4 text-lg font-semibold">Pedidos</h5>
                <div className="pb-4">
                  <Table headTitles={orderTableColumns}>
                    {data?.user.orders?.length === 0 ? (
                      <tr>
                        <td colSpan={12} className="py-5">
                          Actualmente no hay pedidos
                        </td>
                      </tr>
                    ) : (
                      data?.user.orders?.map((order) => (
                        <OrderRow key={order.id} order={order} />
                      ))
                    )}

                    {isLoading && (
                      <tr>
                        <td colSpan={12} className="py-5">
                          Cargando...
                        </td>
                      </tr>
                    )}
                  </Table>

                  <Pagination
                    totalCount={data?.totalUserOrders ?? 0}
                    currentPage={currentPage}
                    pageSize={pageSize}
                    onPageChange={(page) => setCurrentPage(page as number)}
                  />
                </div>
              </section>
            </div>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);
  const { id } = context.query;

  if (id) {
    const helpers = createServerSideHelpers({
      router: appRouter,
      ctx: { prisma, session: null },
      transformer: superjason,
    });

    await helpers.user.getUserById.prefetch({
      userId: id as string,
      take: 10,
      skip: 0,
    });

    return {
      props: {
        session,
        trpcState: helpers.dehydrate(),
      },
    };
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};

export default AdminUserDetail;
