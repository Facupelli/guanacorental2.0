import dayjs from "dayjs";
import { useRouter } from "next/router";
import Head from "next/head";
import { type NextPage } from "next";
import { UseFormRegister, UseFormSetValue, useForm } from "react-hook-form";
import { useState } from "react";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import DialogWithState from "@/components/DialogWithState";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

import { api } from "@/utils/api";
import {
  COUPON_STATUS,
  DISCOUNT_TYPES,
  STATUS,
  discountStatusClass,
} from "@/lib/magic_strings";

import { type DiscountType, type Prisma } from "@prisma/client";
import { formatPrice, getDiscountStatus } from "@/lib/utils";
import { ColumnDef } from "@tanstack/react-table";
import { MoreHorizontal } from "lucide-react";
import { DataTable } from "@/components/ui/data-table";

type Discount = Prisma.DiscountGetPayload<{
  include: {
    rule: {
      include: {
        type: true;
      };
    };
    location: true;
  };
}>;

export const discountColumns: ColumnDef<Discount>[] = [
  { accessorKey: "code", header: "Código" },
  { id: "type", accessorFn: (row) => row.rule.type.name, header: "Tipo" },
  {
    id: "value",
    accessorFn: (row) => row.rule.value,
    header: "Valor",
  },
  {
    accessorKey: "min_total",
    header: "Mínimo",
  },
  {
    id: "location",
    header: "Sucursal",
    accessorFn: (row) =>
      row.location.map((location) => location.name).join(", "),
  },
  {
    accessorKey: "status",
    header: "Estado",
    cell: ({ row }) => {
      const status = getDiscountStatus(row.original);

      return (
        <div>
          <span className={discountStatusClass[status]}>{status}</span>
        </div>
      );
    },
  },
  {
    header: "Empieza",
    accessorFn: (row) => row.starts_at?.toLocaleDateString(),
  },
  {
    accessorFn: (row) => row.ends_at?.toLocaleDateString(),
    header: "Termina",
  },
  {
    accessorKey: "usage_count",
    header: "Usado",
  },
  {
    accessorKey: "usage_limit",
    header: "Límite",
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const order = row.original;

      return <ActionsDropMenu />;
    },
  },
];

type DiscountForm = {
  code: string;
  endsAt?: Date | null;
  startsAt?: Date | null;
  locationIds: string[];
  usageLimit: number;
  typeId: string;
  value: number;
  description?: string;
  minTotal?: number;
};

const AdminDiscounts: NextPage = () => {
  const { register, handleSubmit, setValue } = useForm<DiscountForm>();
  const [showModal, setShowModal] = useState(false);

  const ctx = api.useContext();
  const locations = api.location.getAllLocations.useQuery();
  const { data } = api.discount.getAllDiscounts.useQuery();
  const { mutate } = api.discount.createDiscount.useMutation();

  const onSubmit = (data: DiscountForm) => {
    mutate(
      {
        ...data,
        endsAt: data.endsAt ?? null,
        startsAt: data.startsAt ?? null,
        usageLimit: data.usageLimit > 0 ? data.usageLimit : null,
      },
      {
        onSuccess: (data) => {
          ctx.discount.getAllDiscounts.invalidate();
          setShowModal(false);
        },
        onError: (err) => {
          console.log(err);
        },
      }
    );
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Descuentos</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DialogWithState
        setOpen={setShowModal}
        isOpen={showModal}
        title="Crear Descuento"
      >
        <form className="grid gap-4" onSubmit={handleSubmit(onSubmit)}>
          <div>
            <Label id="code">Código</Label>
            <Input type="text" {...register("code")} required />
          </div>

          <div className="grid grid-cols-2 gap-10">
            <div>
              <Label id="starts">Empieza</Label>
              <Input
                type="date"
                {...register("startsAt", { valueAsDate: true })}
              />
            </div>

            <div>
              <Label id="ens">Termina</Label>
              <Input
                type="date"
                {...register("endsAt", { valueAsDate: true })}
              />
            </div>
          </div>

          <div>
            <Label id="limit">Límite</Label>
            <Input
              type="text"
              {...register("usageLimit", { valueAsNumber: true })}
            />
          </div>

          <div className="grid gap-2">
            <Label>Sucursales:</Label>
            <div className="grid grid-cols-3">
              {locations.data &&
                locations.data.map((location) => (
                  <div className="flex items-center gap-4" key={location.id}>
                    <Input
                      className="h-5 w-5"
                      type="checkbox"
                      id={location.name}
                      value={location.id}
                      {...register("locationIds", { required: true })}
                    />
                    <Label htmlFor={location.name}>{location.name}</Label>
                  </div>
                ))}
            </div>
          </div>

          {data && (
            <div>
              <Label id="limit">Tipo</Label>
              <SelectDiscountType types={data?.types} setValue={setValue} />
            </div>
          )}

          <div>
            <Label id="value">Valor</Label>
            <Input
              type="text"
              {...register("value", { valueAsNumber: true })}
              required
            />
          </div>

          <div>
            <Label id="value">Mínimo de la orden</Label>
            <Input
              type="text"
              {...register("minTotal", { valueAsNumber: true })}
              required
            />
          </div>

          <div className="grid pt-4">
            <Button type="submit">Crear</Button>
          </div>
        </form>
      </DialogWithState>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">DESCUENTOS</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex">
              <div className="ml-auto">
                <Button onClick={() => setShowModal(true)} size="sm">
                  Crear descuento
                </Button>
              </div>
            </div>

            {data?.discounts && (
              <DataTable
                data={data.discounts}
                columns={discountColumns}
                getRowCanExpand={() => false}
              />
            )}
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

const SelectDiscountType = ({
  types,
  setValue,
}: {
  types: DiscountType[];
  setValue: UseFormSetValue<DiscountForm>;
}) => {
  return (
    <Select onValueChange={(e) => setValue("typeId", e)}>
      <SelectTrigger>
        <SelectValue placeholder="selecionar tipo" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Tipo de descuento</SelectLabel>
          {types.map((type) => (
            <SelectItem value={type.id} key={type.id}>
              {type.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

const ActionsDropMenu = () => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>Acciones</DropdownMenuLabel>
        <DropdownMenuItem>editar</DropdownMenuItem>
        <DropdownMenuItem>eliminar</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default AdminDiscounts;
