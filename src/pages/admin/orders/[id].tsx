import superjason from "superjson";
import { Session, getServerSession } from "next-auth";
import { useRouter } from "next/router";
import { prisma } from "@/server/db";
import { type GetServerSideProps, type NextPage } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { authOptions } from "@/server/auth";
import Head from "next/head";
import { useState } from "react";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";

import { api } from "@/utils/api";
import Image from "next/image";
import { getOrderEquipmentOnOwners } from "@/server/utils/order";
import { formatPrice } from "@/lib/utils";
import { type Role } from "@prisma/client";

type Props = {
  user: {
    name: string;
    role: Role[];
    id: string;
  };
};

const AdminUserDetail: NextPage<Props> = ({ user }: Props) => {
  const router = useRouter();

  const { data, isLoading } = api.order.getOrderById.useQuery({
    orderId: router.query.id as string,
  });

  if (!data) return <div>404</div>;

  const order = {
    ...data,
    equipments: getOrderEquipmentOnOwners(data.equipments, data.bookId),
  };

  const getIsAdmin = (roles: Role[]) => {
    if (roles.map((role) => role.name).includes("Admin")) {
      return true;
    }
    return false;
  };

  const isAdmin = getIsAdmin(user.role);

  console.log(order);

  return (
    <>
      <Head>
        <title>Guanaco Admin | Clientes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">PEDIDO DETALLE</h1>
          <div className="grid gap-6 pt-6">
            <div className="grid gap-6 rounded-md bg-white p-6">
              <section className="grid gap-6 rounded-md border border-app-bg p-4">
                <div>
                  <h2 className="text-xl font-bold">#{data?.number}</h2>
                  <p className="text-sm text-primary/60">
                    {data?.created_at.toLocaleDateString("es-AR", {
                      year: "numeric",
                      day: "numeric",
                      month: "short",
                    })}
                  </p>
                </div>

                <div className="grid grid-cols-4">
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Cliente</p>
                    <p>{data?.customer.name}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Email</p>
                    <p>{data?.customer.email}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Teléfono</p>
                    <p>{data?.customer.address?.phone}</p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">DNI</p>
                    <p>{data?.customer.address?.dni_number}</p>
                  </div>
                </div>
              </section>

              <section className="grid gap-6 rounded-md border border-app-bg p-4">
                <h2 className="text-lg font-semibold">Equipos alquilados</h2>

                <div className="grid gap-4">
                  {order.equipments.map((ownerEquipment) => (
                    <div key={ownerEquipment.id} className="flex gap-4">
                      {ownerEquipment.equipment.image && (
                        <div className="relative h-12 w-12">
                          <Image
                            src={ownerEquipment.equipment.image}
                            alt="equipment picture"
                            fill
                          />
                        </div>
                      )}
                      <div className="flex items-baseline gap-4">
                        <div className="grid min-w-[300px]">
                          <div className="flex gap-2">
                            <p>{ownerEquipment.equipment.name}</p>
                            <p>{ownerEquipment.equipment.brand}</p>
                          </div>
                          <p className="text-sm text-primary/70">
                            {ownerEquipment.equipment.model}
                          </p>
                        </div>

                        <p className="pl-6 font-semibold">
                          x
                          {ownerEquipment.books.reduce((acc, curr) => {
                            return acc + curr.quantity;
                          }, 0)}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </section>

              <section className="grid gap-6 rounded-md border border-app-bg p-4">
                <h2 className="text-lg font-semibold">
                  Información del pedido
                </h2>

                <div className="grid grid-cols-3 gap-y-4">
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Retiro</p>
                    <p>
                      {data?.book.start_date.toLocaleDateString("es-AR", {
                        year: "numeric",
                        day: "numeric",
                        month: "short",
                      })}
                    </p>
                  </div>
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Devolución</p>
                    <p>
                      {data?.book.end_date.toLocaleDateString("es-AR", {
                        year: "numeric",
                        day: "numeric",
                        month: "short",
                      })}
                    </p>
                  </div>

                  <div />

                  <div className="col-span-3 grid gap-1">
                    <p className="text-xs text-primary/60">Mensaje</p>
                    <p>{data?.message}</p>
                  </div>
                </div>

                <div className="grid gap-2">
                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Subtotal</p>
                    <p>{formatPrice(data?.subtotal)}</p>
                  </div>

                  <div className="grid gap-1">
                    <p className="text-xs text-primary/60">Total</p>
                    <p className="font-bold">{formatPrice(data?.total)}</p>
                  </div>
                </div>
              </section>

              {isAdmin && (
                <section className="grid gap-6 rounded-md border border-app-bg p-4">
                  <h2 className="text-lg font-semibold">Ganancias</h2>

                  <div className="grid max-w-[50%] grid-cols-3">
                    <div className="grid gap-1">
                      <p className="text-xs text-primary/60">Federico</p>
                      <p>{formatPrice(data?.earnings[0]?.federico ?? 0)}</p>
                    </div>
                    <div className="grid gap-1">
                      <p className="text-xs text-primary/60">Oscar</p>
                      <p>{formatPrice(data?.earnings[0]?.oscar ?? 0)}</p>
                    </div>
                    <div className="grid gap-1">
                      <p className="text-xs text-primary/60">Subalquiler</p>
                      <p>{formatPrice(data?.earnings[0]?.sub ?? 0)}</p>
                    </div>
                  </div>
                </section>
              )}
            </div>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);
  const { id } = context.query;

  if (id && session) {
    const helpers = createServerSideHelpers({
      router: appRouter,
      ctx: { prisma, session: null },
      transformer: superjason,
    });

    await helpers.order.getOrderById.prefetch({
      orderId: id as string,
    });

    const { user } = session;

    return {
      props: {
        user,
        trpcState: helpers.dehydrate(),
      },
    };
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};

export default AdminUserDetail;
