import superjason from "superjson";
import { useForm } from "react-hook-form";
import { getServerSession } from "next-auth";
import Image from "next/image";
import { useRouter } from "next/router";
import { useState } from "react";
import { prisma } from "@/server/db";
import { type GetServerSideProps, type NextPage } from "next";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { authOptions } from "@/server/auth";
import Head from "next/head";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { Button } from "@/components/ui/button";
import DialogWithState from "@/components/DialogWithState";
import { Input } from "@/components/ui/input";
import { DialogFooter } from "@/components/ui/dialog";
import { EditIcon, Trash2, CheckSquare, Plus } from "lucide-react";

import { api } from "@/utils/api";
import { getOrderEquipmentOnOwners } from "@/server/utils/order";
import { formatPrice, getIsAdmin } from "@/lib/utils";

import useDebounce from "@/hooks/useDebounce";

import {
  BookOnEquipment,
  EquipmentOnOwner,
  Owner,
  type Prisma,
  type Role,
} from "@prisma/client";

type Props = {
  user: {
    name: string;
    role: Role[];
    id: string;
  };
};

const AdminOrderDetail: NextPage<Props> = ({ user }: Props) => {
  const router = useRouter();

  const { data, isLoading } = api.order.getOrderById.useQuery({
    orderId: router.query.id as string,
  });

  if (!data) return <div>404</div>;

  const order = {
    ...data,
    equipments: getOrderEquipmentOnOwners(data.equipments, data.bookId),
  };

  const isAdmin = getIsAdmin(user.role);

  return (
    <>
      <Head>
        <title>Guanaco Admin | Clientes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">PEDIDO DETALLE</h1>
          <div className="grid gap-6 pt-6">
            <div className="grid gap-6 rounded-md bg-white p-6">
              <CustomerInfo
                order={{ number: order.number, createdAt: order.created_at }}
                customer={{
                  name: order.customer.name,
                  email: order.customer.email,
                  phone: order.customer.address?.phone,
                  dniNumber: order.customer.address?.dni_number,
                }}
              />

              <EquipmentsBooked
                equipments={order.equipments}
                orderLocation={order.locationId}
                bookId={order.bookId}
                orderId={order.id}
              />

              <OrderInfo
                info={{
                  startDate: order.book.start_date,
                  endDate: order.book.end_date,
                  message: order.message,
                  total: order.total,
                  subtotal: order.subtotal,
                }}
              />

              {isAdmin && (
                <EarningsInfo
                  oscar={order.earnings[0]?.oscar ?? 0}
                  federico={order.earnings[0]?.federico ?? 0}
                  sub={order.earnings[0]?.sub ?? 0}
                />
              )}
            </div>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

type CustomerInfo = {
  order: {
    number: number;
    createdAt: Date;
  };
  customer: {
    name: string | null;
    email: string | null;
    phone: string | undefined;
    dniNumber: string | undefined;
  };
};

const CustomerInfo = ({ order, customer }: CustomerInfo) => {
  return (
    <section className="grid gap-6 rounded-md border border-app-bg p-4">
      <div>
        <h2 className="text-xl font-bold">#{order?.number}</h2>
        <p className="text-sm text-primary/60">
          {order.createdAt.toLocaleDateString("es-AR", {
            year: "numeric",
            day: "numeric",
            month: "short",
          })}
        </p>
      </div>

      <div className="grid grid-cols-4">
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Cliente</p>
          <p>{customer?.name}</p>
        </div>
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Email</p>
          <p>{customer?.email}</p>
        </div>
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Tel√©fono</p>
          <p>{customer?.phone}</p>
        </div>
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">DNI</p>
          <p>{customer?.dniNumber}</p>
        </div>
      </div>
    </section>
  );
};

type EquipmentOwner = Prisma.EquipmentOnOwnerGetPayload<{
  include: { books: true; equipment: true; owner: true };
}>;

type EquipmentsBookedProps = {
  equipments: EquipmentOwner[];
  orderLocation: string;
  bookId: string;
  orderId: string;
};

const EquipmentsBooked = ({
  equipments,
  orderLocation,
  bookId,
  orderId,
}: EquipmentsBookedProps) => {
  const [editMode, setEditMode] = useState(false);
  const [addEquipment, setAddEquipment] = useState(false);

  const { register, watch } = useForm<{ search: string }>();

  const search = useDebounce(watch("search"), 500);

  const { data } = api.equipment.getAllEquipment.useQuery({
    limit: 5,
    search,
    location: orderLocation,
  });

  const { mutate } = api.order.removeEquipmentFromOrder.useMutation();

  const handleDeleteEquipment = (
    bookId: string,
    ownerEquipment: EquipmentOwner
  ) => {
    const data = {
      orderId,
      bookId,
      ownerEquipment: {
        id: ownerEquipment.id,
        quantity: ownerEquipment.equipment.quantity,
        price: ownerEquipment.equipment.price,
      },
    };

    mutate(data);
  };

  return (
    <>
      <DialogWithState
        isOpen={addEquipment}
        setOpen={setAddEquipment}
        title="Argegar equipo al pedido"
      >
        <Input
          placeholder="buscar equipo"
          type="search"
          {...register("search")}
        />

        <div className="grid gap-2">
          {data?.equipments.map((equipment) => (
            <AddEquipment
              key={equipment.id}
              equipment={equipment}
              bookId={bookId}
              orderId={orderId}
            />
          ))}
        </div>

        <DialogFooter className="pt-4">
          <Button
            size="sm"
            onClick={() => {
              setEditMode(false);
              setAddEquipment(false);
            }}
          >
            Aceptar
          </Button>
        </DialogFooter>
      </DialogWithState>

      <section className="grid gap-6 rounded-md border border-app-bg p-4">
        <div className="flex">
          <h2 className="text-lg font-semibold">Equipos alquilados</h2>
          <div className="ml-auto">
            {editMode ? (
              <CheckSquare
                className="h-5 w-5 cursor-pointer text-green-400"
                onClick={() => setEditMode(false)}
              />
            ) : (
              <EditIcon
                className="h-5 w-5 cursor-pointer"
                onClick={() => setEditMode(true)}
              />
            )}
          </div>
        </div>

        <div className="grid gap-4">
          {equipments.map((ownerEquipment) => (
            <div key={ownerEquipment.id} className="flex gap-4">
              {ownerEquipment.equipment.image && (
                <div className="relative h-12 w-12">
                  <Image
                    src={ownerEquipment.equipment.image}
                    alt="equipment picture"
                    fill
                  />
                </div>
              )}
              <div className="flex items-baseline gap-4">
                <div className="grid min-w-[300px]">
                  <div className="flex gap-2">
                    <p>{ownerEquipment.equipment.name}</p>
                    <p>{ownerEquipment.equipment.brand}</p>
                  </div>
                  <p className="text-sm text-primary/70">
                    {ownerEquipment.equipment.model}
                  </p>
                </div>

                <p className="pl-6 font-semibold">
                  x
                  {ownerEquipment.books.reduce((acc, curr) => {
                    return acc + curr.quantity;
                  }, 0)}
                </p>

                {editMode && (
                  <Button variant="secondary" className="bg-transparent">
                    <Trash2
                      className="h-4 w-4"
                      onClick={() =>
                        handleDeleteEquipment(bookId, ownerEquipment)
                      }
                    />
                  </Button>
                )}
              </div>
            </div>
          ))}
        </div>
        {editMode && (
          <Button
            onClick={() => setAddEquipment(true)}
            className="flex w-1/4 gap-2"
            size="sm"
          >
            Agregar equipos <Plus className="h-4 w-4" />
          </Button>
        )}
      </section>
    </>
  );
};

type Equipment = Prisma.EquipmentGetPayload<{
  include: {
    owner: {
      include: {
        owner: true;
        location: true;
        books: { include: { book: true } };
      };
    };
  };
}>;

type AddEquipmentProps = {
  equipment: Equipment;
  bookId: string;
  orderId: string;
};

const AddEquipment = ({ equipment, bookId, orderId }: AddEquipmentProps) => {
  const { register, getValues } = useForm<{ quantity: number }>();

  const { mutate } = api.order.addEquipmentToOrder.useMutation();

  const handleAddEquipment = () => {
    const data = getValues();

    const cart = {
      id: equipment.id,
      quantity: data.quantity,
      price: equipment.price,
      owner: equipment.owner?.map((owner) => ({
        id: owner.id,
        ownerId: owner.ownerId,
        onwerName: owner.owner?.name,
        stock: owner.stock,
        locationId: owner.locationId,
      })),
    };

    mutate({
      bookId,
      orderId,
      cart: [cart],
    });
  };

  return (
    <div key={equipment.id} className="flex items-center gap-4">
      <p>
        {equipment.name} {equipment.brand} {equipment.model}
      </p>
      <Input
        type="text"
        className="ml-auto w-[40px]"
        {...register("quantity", { valueAsNumber: true })}
      />
      <Plus className="h-4 w-4 cursor-pointer" onClick={handleAddEquipment} />
    </div>
  );
};

type OrderInfoProps = {
  info: {
    startDate: Date;
    endDate: Date;
    subtotal: number;
    total: number;
    message: string | null;
  };
};

const OrderInfo = ({ info }: OrderInfoProps) => {
  return (
    <section className="grid gap-6 rounded-md border border-app-bg p-4">
      <h2 className="text-lg font-semibold">Informaci√≥n del pedido</h2>

      <div className="grid grid-cols-3 gap-y-4">
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Retiro</p>
          <p>
            {info.startDate.toLocaleDateString("es-AR", {
              year: "numeric",
              day: "numeric",
              month: "short",
            })}
          </p>
        </div>
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Devoluci√≥n</p>
          <p>
            {info.endDate.toLocaleDateString("es-AR", {
              year: "numeric",
              day: "numeric",
              month: "short",
            })}
          </p>
        </div>

        <div />

        <div className="col-span-3 grid gap-1">
          <p className="text-xs text-primary/60">Mensaje</p>
          <p>{info.message}</p>
        </div>

        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Subtotal</p>
          <p>{formatPrice(info?.subtotal)}</p>
        </div>

        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Total</p>
          <p className="font-bold">{formatPrice(info?.total)}</p>
        </div>
      </div>
    </section>
  );
};

type EarningsInfoProps = {
  oscar: number;
  federico: number;
  sub: number;
};

const EarningsInfo = ({ oscar, federico, sub }: EarningsInfoProps) => {
  return (
    <section className="grid gap-6 rounded-md border border-app-bg p-4">
      <h2 className="text-lg font-semibold">Ganancias</h2>

      <div className="grid max-w-[50%] grid-cols-3">
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Federico</p>
          <p>{formatPrice(federico)}</p>
        </div>
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Oscar</p>
          <p>{formatPrice(oscar)}</p>
        </div>
        <div className="grid gap-1">
          <p className="text-xs text-primary/60">Subalquiler</p>
          <p>{formatPrice(sub)}</p>
        </div>
      </div>
    </section>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);
  const { id } = context.query;

  if (id && session) {
    const helpers = createServerSideHelpers({
      router: appRouter,
      ctx: { prisma, session: null },
      transformer: superjason,
    });

    await helpers.order.getOrderById.prefetch({
      orderId: id as string,
    });

    const { user } = session;

    return {
      props: {
        user,
        trpcState: helpers.dehydrate(),
      },
    };
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};

export default AdminOrderDetail;
