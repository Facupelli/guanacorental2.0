import { ColumnDef, Row } from "@tanstack/react-table";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { useBoundStore } from "@/zustand/store";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import SelectLocation from "@/components/ui/SelectLocation";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { type UseFormSetValue, useForm } from "react-hook-form";
import Pagination from "@/components/ui/Pagination";

import { ChevronDown, ChevronUp, MoreHorizontal } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { DataTable } from "@/components/ui/data-table";

import { ADMIN_ORDERS_SORT, orderStatusClass } from "@/lib/magic_strings";
import { getOrderEquipmentOnOwners } from "@/server/utils/order";
import { handleAdminLocationChange } from "@/lib/utils";
import { api } from "@/utils/api";

import { type NextPage } from "next";
import { Prisma } from "@prisma/client";

type Order = Prisma.OrderGetPayload<{
  include: {
    customer: {
      include: { address: true };
    };
    location: true;
    book: true;
    equipments: {
      include: { books: true; equipment: true; owner: true };
    };
    earnings: true;
  };
}>;

export const orderColumns: ColumnDef<Order>[] = [
  { accessorKey: "number", header: "N°" },
  { id: "fullName", accessorFn: (row) => row.customer.name, header: "Nombre" },
  {
    id: "phone",
    accessorFn: (row) => row.customer.address?.phone,
    header: "Teléfono",
  },
  {
    id: "retiro",
    header: "Retiro",
    accessorFn: (row) => row.book.start_date.toLocaleDateString(),
  },
  {
    id: "devolución",
    header: "Devolución",
    accessorFn: (row) => row.book.end_date.toLocaleDateString(),
  },
  {
    accessorKey: "status",
    header: "Estado",
    cell: ({ row }) => {
      const statusValue: string = row.getValue("status");
      return (
        <div>
          <span className={orderStatusClass[statusValue]}>{statusValue}</span>
        </div>
      );
    },
  },
  {
    id: "sucursal",
    header: "Sucursal",
    accessorFn: (row) => row.location.name,
  },
  {
    id: "expander",
    cell: ({ row, getValue }) => {
      return row.getCanExpand() ? (
        <button {...{ onClick: row.getToggleExpandedHandler() }}>
          {row.getIsExpanded() ? (
            <ChevronUp className="h-4 w-4" />
          ) : (
            <ChevronDown className="h-4 w-4" />
          )}
        </button>
      ) : (
        ""
      );
    },
    footer: (props) => props.column.id,
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const order = row.original;

      return <ActionsDropMenu />;
    },
  },
];

const AdminOrders: NextPage = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const { setValue, watch } = useForm<{ sort: string }>();

  const setLocation = useBoundStore((state) => state.setLocation);
  const location = useBoundStore((state) => state.location);

  const locations = api.location.getAllLocations.useQuery();
  const sort = watch("sort", ADMIN_ORDERS_SORT["NEXT ORDERS"]);
  const { data, isLoading } = api.order.getOrders.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    location: location.id,
    sort,
  });

  const filteredOrers = data?.orders.map((order) => ({
    ...order,
    equipments: getOrderEquipmentOnOwners(order.equipments, order.bookId),
  }));

  return (
    <>
      <Head>
        <title>Guanaco Admin | Pedidos</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">PEDIDOS</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex items-center gap-6 rounded-md bg-white p-4">
              <Label>Sucursal:</Label>
              {locations?.data && (
                <SelectLocation
                  locations={locations.data}
                  placeholder="elegir"
                  defaultValue={`${location.id}-${location.name}`}
                  onValueChange={(e) =>
                    handleAdminLocationChange(e, setLocation)
                  }
                >
                  <SelectItem value="all-all">Todos</SelectItem>
                </SelectLocation>
              )}
              <Label className="whitespace-nowrap	">Ordenar por:</Label>
              <SelectSortOrders setValue={setValue} />
            </div>
            {filteredOrers && (
              <DataTable
                columns={orderColumns}
                data={filteredOrers}
                getRowCanExpand={() => true}
                subComponent={equipmentsList}
              />
            )}
          </div>
          <Pagination
            totalCount={data?.totalCount ?? 0}
            currentPage={currentPage}
            pageSize={pageSize}
            onPageChange={(page) => setCurrentPage(page as number)}
          />
        </AdminLayout>
      </main>
    </>
  );
};

type SelectSortOrdersProps = {
  setValue: UseFormSetValue<{ sort: string }>;
};

const SelectSortOrders = ({ setValue }: SelectSortOrdersProps) => {
  return (
    <Select
      defaultValue={ADMIN_ORDERS_SORT["NEXT ORDERS"]}
      onValueChange={(e) => setValue("sort", e)}
    >
      <SelectTrigger>
        <SelectValue placeholder="elegir" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectItem value={ADMIN_ORDERS_SORT["NEXT ORDERS"]}>
            Próximos pedidos a entregar
          </SelectItem>
          <SelectItem value={ADMIN_ORDERS_SORT["LAST ORDERS"]}>
            Últimos pedidos
          </SelectItem>
          <SelectItem value={ADMIN_ORDERS_SORT.HISTORY}>Historial</SelectItem>
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export const equipmentsList = ({ row }: { row: Row<Order> }) => {
  return (
    <div>
      {row.original.equipments.map((ownerEquipment) => (
        <div className="flex items-center gap-4">
          {ownerEquipment.equipment.image && (
            <div className="relative h-10 w-10 rounded-full">
              <Image
                src={ownerEquipment.equipment.image}
                alt="equipment picture"
                fill
                style={{ borderRadius: "100%" }}
              />
            </div>
          )}
          <div className="flex items-center gap-2">
            <p className="font-semibold">{ownerEquipment.equipment.name}</p>
            <p className="font-semibold">{ownerEquipment.equipment.brand}</p>
            <p>{ownerEquipment.equipment.model}</p>
          </div>
          <div>
            <p>
              x
              {ownerEquipment.books.reduce((acc, curr) => {
                return acc + curr.quantity;
              }, 0)}
            </p>
          </div>
        </div>
      ))}
    </div>
  );
};

const ActionsDropMenu = () => {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>Acciones</DropdownMenuLabel>
        <DropdownMenuItem>Generar remito</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default AdminOrders;
