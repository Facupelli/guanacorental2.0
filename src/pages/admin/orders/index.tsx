import { getServerSession } from "next-auth";
import { type UseFormSetValue, useForm } from "react-hook-form";
import Head from "next/head";
import { useState } from "react";
import { useBoundStore } from "@/zustand/store";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import SelectLocation from "@/components/ui/SelectLocation";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import Pagination from "@/components/ui/Pagination";
import DataTable from "@/components/ui/data-table";
import { Input } from "@/components/ui/input";

import { api } from "@/utils/api";
import { ADMIN_ORDERS_SORT } from "@/lib/magic_strings";
import { getOrderEquipmentOnOwners } from "@/server/utils/order";
import {
  getIsAdmin,
  getIsEmployee,
  handleAdminLocationChange,
} from "@/lib/utils";
import { orderColumns, equipmentsList } from "@/lib/order";
import { authOptions } from "@/server/auth";
import useDebounce from "@/hooks/useDebounce";

import { type GetServerSideProps, type NextPage } from "next";
import { type Prisma } from "@prisma/client";

type Order = Prisma.OrderGetPayload<{
  include: {
    customer: {
      include: { address: true };
    };
    location: true;
    book: true;
    equipments: {
      include: { books: true; equipment: true; owner: true };
    };
    earnings: true;
  };
}>;

const AdminOrders: NextPage = () => {
  const [, setOrder] = useState<Order | null>(null);

  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const { setValue, watch, register } = useForm<{
    sort: string;
    search: string;
  }>();

  const setLocation = useBoundStore((state) => state.setLocation);
  const location = useBoundStore((state) => state.location);

  const locations = api.location.getAllLocations.useQuery();

  const sort = watch("sort", ADMIN_ORDERS_SORT["NEXT ORDERS"]);
  const search = useDebounce(watch("search", ""), 500);

  const { data } = api.order.getOrders.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    location: location.id,
    sort,
    search,
  });

  const filteredOrers = data?.orders.map((order) => ({
    ...order,
    equipments: getOrderEquipmentOnOwners(order.equipments, order.bookId),
  }));

  return (
    <>
      <Head>
        <title>Guanaco Admin | Pedidos</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">PEDIDOS</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex items-center gap-6 rounded-md bg-white p-4">
              <Label>Sucursal:</Label>
              {locations?.data && (
                <SelectLocation
                  locations={locations.data}
                  placeholder="elegir"
                  defaultValue={`${location.id}-${location.name}`}
                  onValueChange={(e) =>
                    handleAdminLocationChange(e, setLocation)
                  }
                >
                  <SelectItem value="all-all">Todos</SelectItem>
                </SelectLocation>
              )}
              <Label className="whitespace-nowrap	">Ordenar por:</Label>
              <SelectSortOrders setValue={setValue} />
              <Input
                type="search"
                placeholder="buscar por número"
                {...register("search")}
                defaultValue={undefined}
              />
            </div>
            {filteredOrers && (
              <DataTable
                data={filteredOrers}
                columns={orderColumns}
                setRowData={setOrder}
                expandedComponent={equipmentsList}
              />
              // <DataTable
              //   columns={orderColumns}
              //   data={filteredOrers}
              //   getRowCanExpand={() => true}
              //   subComponent={equipmentsList}
              // />
            )}
          </div>
          <Pagination
            totalCount={data?.totalCount ?? 0}
            currentPage={currentPage}
            pageSize={pageSize}
            onPageChange={(page) => setCurrentPage(page as number)}
          />
        </AdminLayout>
      </main>
    </>
  );
};

type SelectSortOrdersProps = {
  setValue: UseFormSetValue<{ sort: string; search: string }>;
};

const SelectSortOrders = ({ setValue }: SelectSortOrdersProps) => {
  return (
    <Select
      defaultValue={ADMIN_ORDERS_SORT["NEXT ORDERS"]}
      onValueChange={(e) => setValue("sort", e)}
    >
      <SelectTrigger>
        <SelectValue placeholder="elegir" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectItem value={ADMIN_ORDERS_SORT["NEXT ORDERS"]}>
            Próximos pedidos a entregar
          </SelectItem>
          <SelectItem value={ADMIN_ORDERS_SORT["LAST ORDERS"]}>
            Últimos pedidos
          </SelectItem>
          <SelectItem value={ADMIN_ORDERS_SORT.HISTORY}>Historial</SelectItem>
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  const isAdmin = getIsAdmin(session);
  const isEmployee = getIsEmployee(session);

  if (!isAdmin && !isEmployee) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const { user } = session;

  return {
    props: {
      user,
    },
  };
};
export default AdminOrders;
