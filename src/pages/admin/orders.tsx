import { type NextPage } from "next";
import Head from "next/head";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { api } from "@/utils/api";
import Table from "@/components/ui/Table";
import { Button } from "@/components/ui/button";
import { ChevronDown } from "lucide-react";
import { formatPrice } from "@/lib/utils";
import { ADMIN_ORDERS_SORT, STATUS } from "@/lib/magic_strings";
import SelectLocation from "@/components/ui/SelectLocation";
import { useBoundStore } from "@/zustand/store";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { UseFormSetValue, useForm } from "react-hook-form";

interface StatusStyles {
  [status: string]: string;
}

const columns = [
  { title: "N°" },
  { title: "Nombre" },
  { title: "Celular" },
  { title: "Retiro" },
  { title: "Devolución" },
  { title: "Estado" },
  { title: "Total" },
  { title: "Remito" },
  { title: "Sucursal" },
];

const AdminOrders: NextPage = () => {
  const { setValue, watch } = useForm<{ sort: string }>();

  const setLocation = useBoundStore((state) => state.setLocation);
  const location = useBoundStore((state) => state.location);

  const locations = api.location.getAllLocations.useQuery();
  const sort = watch("sort", ADMIN_ORDERS_SORT["NEXT ORDERS"]);
  const { data } = api.order.getOrders.useQuery({
    take: 10,
    skip: 0,
    location: location.id,
    sort,
  });

  const handleChange = (e: string) => {
    const locationId = e.split("-")[0];
    const locationName = e.split("-")[1];
    if (locationId && locationName) {
      setLocation({ locationId, locationName });
    }
  };

  if (!data || !locations.data) return <div>404</div>;

  const statusClass: StatusStyles = {
    [STATUS.PENDING]: "py-1 px-3 bg-yellow-100 rounded-xl text-slate-800",
    [STATUS.TODAY]: "py-1 px-3 bg-blue-100 rounded-xl text-slate-800",
    [STATUS.DELIVERED]: "py-1 px-3 bg-green-100 rounded-xl text-slate-800",
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Pedidos</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">PEDIDOS</h1>
          <div className="grid gap-6 pt-6">
            <div className="flex w-2/3 items-center gap-6 rounded-md bg-white p-4">
              <Label>Sucursal:</Label>
              <SelectLocation
                locations={locations.data}
                placeholder="elegir"
                defaultValue={`${location.id}-${location.name}`}
                onValueChange={(e) => handleChange(e)}
              >
                <SelectItem value="all-all">Todos</SelectItem>
              </SelectLocation>
              <Label className="whitespace-nowrap	">Ordenar por:</Label>
              <SelectSortOrders setValue={setValue} />
            </div>
            <Table headTitles={columns}>
              {data.orders.map((order) => (
                <tr key={order.id} className="text-sm">
                  <td className="py-4">{order.number}</td>
                  <td className="py-4">{order.customer.name}</td>
                  <td className="py-4">{order.customer.address?.phone}</td>
                  <td className="py-4">
                    {new Date(order.book.start_date).toLocaleDateString()} -{" "}
                    {order.book.pickup_hour}hs
                  </td>
                  <td className="py-4">
                    {new Date(order.book.end_date).toLocaleDateString()}
                  </td>
                  <td className="py-4 text-xs font-bold">
                    <span className={statusClass[order.status]}>
                      {order.status ?? "-"}
                    </span>
                  </td>
                  <td className="py-4">{formatPrice(order.total)}</td>
                  <td className="py-4">
                    <Button className="h-5 text-xs" size="sm">
                      Generar
                    </Button>
                  </td>
                  <td className="py-4">{order.location.name}</td>
                  <td className="py-4">
                    <Button variant="ghost" className="h-6 p-2" size="sm">
                      <ChevronDown className="h-4 w-4" />
                    </Button>
                  </td>
                </tr>
              ))}
            </Table>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

type SelectSortOrdersProps = {
  setValue: UseFormSetValue<{ sort: string }>;
};

const SelectSortOrders = ({ setValue }: SelectSortOrdersProps) => {
  return (
    <Select
      defaultValue={ADMIN_ORDERS_SORT["NEXT ORDERS"]}
      onValueChange={(e) => setValue("sort", e)}
    >
      <SelectTrigger>
        <SelectValue placeholder="elegir" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectItem value={ADMIN_ORDERS_SORT["NEXT ORDERS"]}>
            Próximos pedidos a entregar
          </SelectItem>
          <SelectItem value={ADMIN_ORDERS_SORT["LAST ORDERS"]}>
            Últimos pedidos
          </SelectItem>
          <SelectItem value={ADMIN_ORDERS_SORT.HISTORY}>Historial</SelectItem>
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export default AdminOrders;
