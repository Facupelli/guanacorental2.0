import superjason from "superjson";
import { type GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { formatPrice, getIsAdmin } from "@/lib/utils";
import { prisma } from "@/server/db";
import { type Prisma } from "@prisma/client";
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement } from "chart.js";
import MostBookedEquipments from "@/components/stats/MostBookedEquipments";
import OrdersByMonth from "@/components/stats/OrdersByMonth";
import OrdersByCategory from "@/components/stats/OrdersByCategory";
import { AdminSelectLocation } from "@/components/ui/SelectLocation";
import { useForm } from "react-hook-form";
import type { Category, Location } from "@/types/models";
import { Label } from "@/components/ui/label";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { api } from "@/utils/api";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { SelectCategory } from "@/components/ui/SelectCategory";
import { type TopBookedEquipment } from "trpc/routers/stats";
import { auth } from "auth";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement);

type Order = {
  categories: string[];
  total: number;
};

type StatsPageProps = {
  locations: Location[];
  categories: Category[];
  monthAverage: {
    ordersByMonth: { [key: number]: number };
    sjOrdersByMonth: { [key: number]: number };
    mdzOrdersByMonth: { [key: number]: number };
    avg: string;
  };
  average: { subtotalAverage: number };
};

const StatsPage: NextPage<StatsPageProps> = ({ locations, categories, average, monthAverage }: StatsPageProps) => {
  const { setValue, watch } = useForm<{
    location: string;
    category: string;
    take: number;
  }>();

  const locationId = watch("location");
  const categoryId = watch("category");
  const take = watch("take", 10);

  const { data: topBookedEquipments, isLoading: isLoadingTopBookedEquipments } =
    api.stats.getTopBookedEquipments.useQuery({
      category: categoryId,
      take,
    });

  // const { data: bookedEquipments, isLoading: isLoadingBookedEquipments } =
  //   api.stats.getEquipmentBookedStat.useQuery({
  //     equipmentId: "cl9h2fv1h0013eoqazquz1j8u",
  //   });

  const { data: topCategoryOrders, isLoading: isLoadingCategoryOrders } = api.stats.getTopCategoryOrders.useQuery({
    location: locationId,
  });

  return (
    <>
      <Head>
        <title>Guanaco Admin | Estadísticas</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo-favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout route="Estadísticas">
          <h1 className="text-lg font-bold">Estadísticas</h1>

          <div className="flex flex-col gap-6 pt-6">
            <div>
              <p>Promedio precio alquileres: {formatPrice(average.subtotalAverage)}</p>
              <p>Promedio alquileres mensuales: {monthAverage.avg}</p>
            </div>

            <OrdersByMonth ordersByMonth={monthAverage} />

            <div className="my-8 flex w-full items-center gap-2 rounded-md bg-white p-4">
              <div className="flex-1 ">
                <Label>Categoría</Label>
                <SelectCategory categories={categories} setValue={(e) => setValue("category", e)} />
              </div>

              <div className="flex-1 ">
                <Label>Cantidad de equipos</Label>
                <Select onValueChange={(e) => setValue("take", Number(e))} defaultValue="10">
                  <SelectTrigger>
                    <SelectValue placeholder="elegir" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectGroup>
                      <SelectLabel>Cantidad</SelectLabel>
                      <SelectItem value="10">10</SelectItem>
                      <SelectItem value="15">15</SelectItem>
                      <SelectItem value="20">20</SelectItem>
                      <SelectItem value="0">Todos</SelectItem>
                    </SelectGroup>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex-1 ">
                <Label>Sucursal</Label>
                <AdminSelectLocation locations={locations} setValue={(e) => setValue("location", e)}>
                  <SelectItem value="all">Todas</SelectItem>
                </AdminSelectLocation>
              </div>
            </div>

            {!isLoadingTopBookedEquipments && (
              <div className={`${take === 0 ? "h-[4500px]" : "h-[600px]"}`}>
                <MostBookedEquipments equipments={topBookedEquipments as TopBookedEquipment[]} />

                {/* NO SE UTILIZARÁ DE MOMENTO */}
                {/* <MostBookedEquipmentsByDay
                  equipments={topBookedEquipments as TopBookedEquipment[]}
                /> */}
              </div>
            )}

            {/* NO SE UTILIZARÁ DE MOMENTO */}
            {/* {!isLoadingBookedEquipments && (
              <BookedEquipment
                equipments={bookedEquipments as BookedEquipmentType[]}
              />
            )} */}

            {!isLoadingCategoryOrders && (
              <div className="mx-auto mt-8 size-[600px] max-w-[600px]">
                <OrdersByCategory orders={topCategoryOrders as Order[]} />
              </div>
            )}
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await auth(context);

  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  const isAdmin = getIsAdmin(session);

  if (!isAdmin) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const { user } = session;

  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session },
    transformer: superjason,
  });

  const locations = await prisma.location.findMany({});
  const categories = await prisma.category.findMany({});
  await helpers.stats.getTopBookedEquipments.prefetch({});
  await helpers.stats.getTopCategoryOrders.prefetch({});

  const ordersForAverage = await prisma.order.findMany({
    select: {
      total: true,
      subtotal: true,
    },
  });

  const calculateAverage = () => {
    let subtotalSum = 0;
    ordersForAverage.forEach((order) => {
      subtotalSum += order.subtotal;
    });

    return (subtotalSum / ordersForAverage.length).toFixed(2);
  };

  const totalOrders = await prisma.order.findMany({
    include: {
      book: true,
    },
  });

  const sjOrders = await prisma.order.findMany({
    where: {
      locationId: locations.find((l) => l.name === "San Juan")?.id,
    },
    include: {
      book: true,
    },
  });

  const mdzOrders = await prisma.order.findMany({
    where: {
      locationId: locations.find((l) => l.name === "Mendoza")?.id,
    },
    include: {
      book: true,
    },
  });

  const monthAverage = calculateAverageByMonth(totalOrders);
  const sjMonthAverage = calculateAverageByMonth(sjOrders);
  const mdzMonthAverage = calculateAverageByMonth(mdzOrders);

  return {
    props: {
      user,
      locations,
      categories,
      average: {
        subtotalAverage: calculateAverage(),
      },
      monthAverage: {
        ordersByMonth: monthAverage.ordersByMonth,
        sjOrdersByMonth: sjMonthAverage.ordersByMonth,
        mdzOrdersByMonth: mdzMonthAverage.ordersByMonth,
        avg: monthAverage.avg,
      },
    },
  };
};

type OrderAverage = Prisma.OrderGetPayload<{
  include: {
    book: true;
  };
}>;

const calculateAverageByMonth = (orders: OrderAverage[]) => {
  const ordersByMonth: { [key: number]: number } = {
    0: 0,
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 0,
    9: 0,
    10: 0,
    11: 0,
    12: 0,
  };

  orders.forEach((order) => {
    const month = new Date(order.book.start_date).getMonth();

    ordersByMonth[month] ? ordersByMonth[month]++ : (ordersByMonth[month] = 1);
  });

  const sum = Object.values(ordersByMonth).reduce((a, b) => a + b, 0);
  const avg = (sum / Object.keys(ordersByMonth).length).toFixed(2);

  return { ordersByMonth, avg };
};

export default StatsPage;
