import { getServerSession } from "next-auth";
import { useSession } from "next-auth/react";
import dayjs from "dayjs";
import Calendar from "react-calendar";
import { useEffect, useState } from "react";
import Head from "next/head";
import { useBoundStore } from "@/zustand/store";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { Label } from "@/components/ui/label";
import SelectLocation from "@/components/ui/SelectLocation";
import { SelectItem } from "@/components/ui/select";
import DataTable from "@/components/ui/data-table";

import { authOptions } from "@/server/auth";
import { api } from "@/utils/api";
import {
  getIsAdmin,
  getIsEmployee,
  handleAdminLocationChange,
} from "@/lib/utils";
import { getOrderEquipmentOnOwners } from "@/server/utils/order";
import { equipmentsList, orderColumns } from "@/lib/order";

import { type GetServerSideProps, type NextPage } from "next";
import { type Prisma } from "@prisma/client";

type Order = Prisma.OrderGetPayload<{
  include: {
    book: true;
    equipments: {
      include: { books: true; owner: true; equipment: true };
    };
    customer: {
      include: {
        address: true;
      };
    };
    location: true;
    earnings: true;
  };
}>;

const Admin: NextPage = () => {
  const { data: session } = useSession();

  const [orderSelected, setOrder] = useState<Order | null>(null);

  // const [calendarValue, setCalendarValue] = useState();
  const setLocation = useBoundStore((state) => state.setLocation);
  const location = useBoundStore((state) => state.location);
  const [orders, setOrders] = useState<Order[] | null>(null);

  const locations = api.location.getAllLocations.useQuery();
  const { data, isLoading } = api.order.getCalendarOrders.useQuery({
    location: location.id,
  });

  const handleClickDay = (day: Date) => {
    if (data) {
      const orders = data.filter(
        (order) =>
          dayjs(order.book.start_date).isSame(dayjs(day), "day") ||
          dayjs(order.book.end_date).isSame(dayjs(day), "day")
      );

      const filteredOrers = orders.map((order) => ({
        ...order,
        equipments: getOrderEquipmentOnOwners(order.equipments, order.bookId),
      }));

      setOrders(filteredOrers);
    }
  };

  useEffect(() => {
    handleClickDay(new Date());
  }, [data]);

  let isAdmin = getIsAdmin(session);

  let calendarMinDate = isAdmin
    ? dayjs().subtract(1, "month").startOf("day").toDate()
    : dayjs().startOf("day").toDate();

  return (
    <>
      <Head>
        <title>Guanaco Rental | Calendario</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">CALENDARIO</h1>
          <div className="grid gap-6 pt-6">
            <div className="col-span-12 flex w-1/3 items-center gap-2 rounded-md bg-white p-4">
              <Label>Sucursal:</Label>
              {locations?.data && (
                <SelectLocation
                  locations={locations.data}
                  placeholder="elegir"
                  defaultValue={`${location.id}-${location.name}`}
                  onValueChange={(e) =>
                    handleAdminLocationChange(e, setLocation)
                  }
                >
                  <SelectItem value="all-all">Todos</SelectItem>
                </SelectLocation>
              )}
            </div>
            <div className="flex max-w-[650px] gap-6">
              <Calendar
                locale="es-ES"
                minDate={calendarMinDate}
                onClickDay={handleClickDay}
                className="rounded-lg p-4"
                defaultValue={new Date()}
                tileClassName={({ date }: { date: Date }) => {
                  if (
                    data?.find(
                      (order) =>
                        dayjs(order.book.end_date).isSame(dayjs(date), "day") &&
                        data.find((order) =>
                          dayjs(order.book.start_date).isSame(
                            dayjs(date),
                            "day"
                          )
                        )
                    )
                  ) {
                    return "pickup-and-return";
                  }
                  if (
                    data?.find((order) =>
                      dayjs(order.book.end_date).isSame(dayjs(date), "day")
                    )
                  ) {
                    return "return-day";
                  }
                  if (
                    data?.find((order) =>
                      dayjs(order.book.start_date).isSame(dayjs(date), "day")
                    )
                  ) {
                    return "pickup-day";
                  }

                  return "";
                }}
              />
              <div className="flex w-[300px] flex-col gap-2 rounded-md bg-white p-4 text-sm font-semibold">
                <div className="flex items-center gap-2">
                  <div className="h-4 w-4 rounded-full bg-green-400" />
                  <p>Retiro de equipos</p>
                </div>
                <div className="flex items-center gap-2">
                  <div className="h-4 w-4 rounded-full bg-red-400" />
                  <p>Devolución de equipos</p>
                </div>
                <div className="flex items-center gap-2">
                  <div className="flex items-center">
                    <div className="r h-4 w-2 rounded-bl-full rounded-tl-full bg-green-400" />
                    <div className="r h-4 w-2 rounded-br-full rounded-tr-full bg-red-400" />
                  </div>
                  <p>Devolución y Retiro de equipos</p>
                </div>
                <div className="py-4 text-primary/60">
                  Selecciona una fecha para ver los pedidos que se retiran o
                  devuelven ese mismo día.
                </div>
              </div>
            </div>
            <div className="col-span-12">
              {orders && (
                <DataTable
                  data={orders}
                  columns={orderColumns}
                  setRowData={setOrder}
                  expandedComponent={equipmentsList}
                />
              )}
            </div>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  const isAdmin = getIsAdmin(session);
  const isEmployee = getIsEmployee(session);

  if (!isAdmin && !isEmployee) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const { user } = session;

  return {
    props: {
      user,
    },
  };
};

export default Admin;
