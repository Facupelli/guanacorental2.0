import superjason from "superjson";
import { prisma } from "@/server/db";
import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import {
  type UseFieldArrayRemove,
  type UseFormRegister,
  type UseFormSetValue,
  useFieldArray,
  useForm,
} from "react-hook-form";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { useBoundStore } from "@/zustand/store";

import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { AdminSelectLocation } from "@/components/ui/SelectLocation";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Pagination from "@/components/ui/Pagination";
import Table from "@/components/ui/table";
import { Plus, RotateCw, X } from "lucide-react";

import { api } from "@/utils/api";
import { formatPrice } from "@/lib/utils";

import { type GetServerSideProps, type NextPage } from "next";
import type {
  Equipment,
  EquipmentOnOwner,
  Location,
  Owner,
} from "@/types/models";
import { getServerSession } from "next-auth";
import { authOptions } from "@/server/auth";

const tableTitles = [
  { title: "" },
  { title: "Nombre, Marca y Modelo" },
  { title: "Imagen y Precio" },
  { title: "Stock" },
];

type Props = {
  locations: Location[];
  owners: Owner[];
};

const EquipmentAdmin: NextPage<Props> = ({ locations, owners }: Props) => {
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 15;

  const location = useBoundStore((state) => state.location);

  const { data, isLoading } = api.equipment.adminGetEquipment.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    locationId: location.id,
  });

  return (
    <>
      <Head>
        <title>Guanaco Admin | Equipos</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">Equipos</h1>
          <div className="pt-6">
            <Table headTitles={tableTitles}>
              {data?.equipment.map((equipment) => (
                <EquipmentRow
                  key={equipment.id}
                  equipment={equipment}
                  owners={owners}
                  locations={locations}
                />
              ))}
              {isLoading && (
                <tr>
                  <td className="py-5" colSpan={12}>
                    Cargando...
                  </td>
                </tr>
              )}
            </Table>

            <Pagination
              totalCount={data?.totalCount ?? 0}
              currentPage={currentPage}
              pageSize={pageSize}
              onPageChange={(page) => setCurrentPage(page as number)}
            />
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

type EquipmentForm = {
  name: string;
  brand: string;
  model: string;
  image: string;
  price: number;
  equipmentId: string;
  available: string;
};

const EquipmentRow = ({
  equipment,
  owners,
  locations,
}: {
  equipment: Equipment;
  owners: Owner[];
  locations: Location[];
}) => {
  const { register, getValues } = useForm<EquipmentForm>();
  const ctx = api.useContext();

  const { mutate, isLoading } = api.equipment.putEquipment.useMutation();

  const handleUpdate = () => {
    const data = getValues();

    mutate(
      { ...data, equipmentId: equipment.id },
      {
        onSuccess: () => {
          void ctx.equipment.adminGetEquipment.invalidate();
        },
        onError: (err) => {
          console.log(err.message);
        },
      }
    );
  };

  return (
    <tr key={equipment.id} className="center border-b border-app-bg text-sm">
      <td className="py- w-14">
        {equipment.image && (
          <div className="relative h-14 w-14">
            <Image
              src={equipment.image}
              fill
              style={{ objectFit: "cover" }}
              alt="equipment picture"
            />
          </div>
        )}
      </td>
      <td className="grid gap-1 py-4">
        <div className="flex items-center gap-1">
          <Input
            type="text"
            defaultValue={equipment.name}
            className="h-6"
            {...register("name")}
          />
          <Input
            type="text"
            defaultValue={equipment.brand}
            className="h-6"
            {...register("brand")}
          />
        </div>
        <Input
          type="text"
          defaultValue={equipment.model}
          className="h-6"
          {...register("model")}
        />
      </td>
      <td className="py-4">
        <div className="grid gap-1">
          <Input
            type="text"
            defaultValue={equipment.price}
            className="h-6"
            {...register("price", { valueAsNumber: true })}
          />
          <Input
            type="text"
            defaultValue={equipment.image as string}
            className="h-6"
            {...register("image")}
          />
        </div>
      </td>
      <td className="py-4">
        <div className="grid  gap-2 ">
          <OwnerLocationStockModal
            owners={owners}
            owner={equipment.owner}
            equipment={equipment}
            locations={locations}
          />
          <div className="flex h-6 items-center justify-center">
            <Switch
              defaultChecked={equipment.available}
              title="habilitado"
              {...register("available")}
            />
          </div>
        </div>
      </td>
      <td className="py-4">
        <Button
          className="h-12 px-2"
          title="actualizar"
          type="button"
          onClick={handleUpdate}
          disabled={isLoading}
        >
          <RotateCw className="h-4 w-4" />
        </Button>
      </td>
    </tr>
  );
};

type OwnerLocationStockProps = {
  equipment: Equipment;
  locations: Location[];
  owner: EquipmentOnOwner[] | undefined;
  owners: Owner[];
};

export type Form = {
  owner: {
    ownerId: string;
    locationId: string;
    stock: number;
  }[];
};

const OwnerLocationStockModal = ({
  equipment,
  locations,
  owner,
  owners,
}: OwnerLocationStockProps) => {
  const {
    register,
    control,
    handleSubmit,
    setValue,
    // formState: { errors },
  } = useForm<Form>();
  const { fields, append, remove } = useFieldArray({
    control,
    name: "owner",
  });

  const { mutate, isLoading } =
    api.equipment.createEquipmentOnOwner.useMutation();

  const onSubmit = (data: Form) => {
    const mutateData = {
      owner: data.owner.map((owner) => ({
        ...owner,
        equipmentId: equipment.id,
      })),
    };

    mutate(mutateData, {
      onSuccess: (data) => {
        console.log(data.message);
      },
      onError: (err) => {
        console.error(err);
      },
    });
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button size="sm" className="h-6 text-xs" variant="secondary">
          ver
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>
            {equipment.name} {equipment.brand}
          </DialogTitle>
          <DialogDescription>{equipment.model}</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="grid grid-cols-7 gap-4 pb-2 text-sm font-semibold">
            <Label className="col-span-2">Dueño</Label>
            <Label className="col-span-2">Sucursal</Label>
            <Label className="col-span-2">Stock</Label>
          </div>
          <div>
            {owner?.map((owner) => (
              <div
                key={owner.id}
                className="grid grid-cols-7 items-center gap-2"
              >
                <p className="col-span-2 rounded-md border border-input px-3 py-1 text-sm">
                  {owner.owner?.name}
                </p>
                <p className="col-span-2 rounded-md border border-input px-3 py-1 text-sm">
                  {owner.location.name}
                </p>
                <p className="col-span-2 rounded-md border border-input px-3 py-1 text-sm">
                  {owner.stock}
                </p>
                <Button variant="link" className="text-gray-800">
                  <X className="h-3 w-3" />
                </Button>
              </div>
            ))}
            <div className="pt-4">
              {fields?.map((field, index) => (
                <FieldArray
                  key={field.id}
                  remove={remove}
                  locations={locations}
                  owners={owners}
                  register={register}
                  setValue={setValue}
                  index={index}
                />
              ))}
            </div>
          </div>

          <div className="flex justify-center pt-6">
            <Button
              type="button"
              size="sm"
              variant="ghost"
              onClick={() => append({ ownerId: "", stock: 1, locationId: "" })}
              className="flex items-center gap-2 "
            >
              Agregar dueño <Plus className="h-4 w-4" />
            </Button>
          </div>

          <div className="flex justify-end pt-4">
            <Button type="submit" disabled={isLoading}>
              Actualizar
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

type FieldArrayProps = {
  owners: Owner[];
  locations: Location[];
  register: UseFormRegister<Form>;
  index: number;
  setValue: UseFormSetValue<Form>;
  remove: UseFieldArrayRemove;
};

const FieldArray = ({
  owners,
  locations,
  register,
  index,
  remove,
  setValue,
}: FieldArrayProps) => {
  return (
    <section className="grid grid-cols-7 items-center gap-2 rounded-md bg-slate-50 p-2">
      <div className="col-span-2">
        <SelectOwner owners={owners} index={index} setValue={setValue} />
      </div>
      <div className="col-span-2">
        <AdminSelectLocation
          index={index}
          locations={locations}
          setValue={setValue}
        />
      </div>
      <Input
        type="text"
        {...register(`owner.${index}.stock` as const, {
          valueAsNumber: true,
        })}
        className="col-span-2 h-6"
      />
      <Button
        variant="link"
        className="text-gray-800"
        onClick={() => remove(index)}
      >
        <X className="h-3 w-3" />
      </Button>
    </section>
  );
};

type SelectOwnerProps = {
  defaultValue?: string;
  owners: Owner[];
  index: number;
  setValue: UseFormSetValue<Form>;
};

const SelectOwner = ({
  defaultValue,
  owners,
  index,
  setValue,
}: SelectOwnerProps) => {
  return (
    <Select
      defaultValue={defaultValue}
      onValueChange={(e) => setValue(`owner.${index}.ownerId` as const, e)}
    >
      <SelectTrigger className="h-6">
        <SelectValue placeholder="elegir" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Dueños</SelectLabel>
          {owners.map((owner) => (
            <SelectItem value={owner.id} key={owner.id}>
              {owner.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session },
    transformer: superjason,
  });

  const locations = await prisma.location.findMany({});
  const owners = await prisma.owner.findMany({});

  await helpers.equipment.adminGetEquipment.prefetch({ take: 15, skip: 0 });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      locations,
      owners,
    },
  };
};

export default EquipmentAdmin;
