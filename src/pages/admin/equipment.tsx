import superjason from "superjson";
import { prisma } from "@/server/db";
import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { api } from "@/utils/api";
import { useBoundStore } from "@/zustand/store";
import { SORT_TYPES } from "@/lib/magic_strings";
import { formatPrice } from "@/lib/utils";
import { Switch } from "@/components/ui/switch";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import SelectLocation from "@/components/ui/SelectLocation";
import type { Location } from "@/types/models";

type Props = {
  locations: Location[];
};

const EquipmentAdmin: NextPage<Props> = ({ locations }: Props) => {
  const location = useBoundStore((state) => state.location);

  const { data, fetchNextPage } =
    api.equipment.getAllEquipment.useInfiniteQuery(
      {
        sort: SORT_TYPES.DEFAULT,
        location,
        limit: 20,
      },
      {
        getNextPageParam: (lastPage) => lastPage.nextCursor,
      }
    );

  if (!data) return <div>404</div>;

  const handleLoadMore = () => {
    fetchNextPage();
  };

  const equipments = data.pages.map((page) => page.equipments).flat();

  console.log(equipments);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">Equipos</h1>
          <div className="pt-6">
            <table className="w-full rounded-md bg-white">
              <thead className="border-b border-app-bg">
                <tr className="text-left text-sm">
                  <th className="p-4">Nombre</th>
                  <th className="p-4">Marca</th>
                  <th className="p-4">Modelo</th>
                  <th className="p-4">Precio</th>
                  <th className="p-4">Due√±o y Stock</th>
                  <th className="p-4">Sucursal</th>
                  <th className="p-4">Disponible</th>
                </tr>
              </thead>
              <tbody className="text-[14px]">
                {equipments?.map((equipment) => (
                  <tr key={equipment.id}>
                    <td className="px-4 py-2">{equipment.name}</td>
                    <td className="px-4 py-2">{equipment.brand}</td>
                    <td className="px-4 py-2">{equipment.model}</td>
                    <td className="px-4 py-2">
                      {formatPrice(equipment.price)}
                    </td>
                    <td className="px-4 py-2">
                      {equipment.owner.map((owner) => owner.owner.name)}
                    </td>
                    <td className="px-4 py-2">
                      <SelectLocation
                        locations={locations}
                        placeholder=""
                        defaultValue={equipment.location.name}
                        onValueChange={(e) => console.log(e)}
                        height="h-6"
                      />
                    </td>
                    <td className="px-4 py-2">
                      <Switch defaultChecked={equipment.available} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session: null },
    transformer: superjason,
  });

  const locations = await prisma.location.findMany({});

  await helpers.equipment.getAllEquipment.prefetch({ sort: "", limit: 20 });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      locations,
    },
  };
};

export default EquipmentAdmin;
