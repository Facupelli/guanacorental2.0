import superjason from "superjson";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { getServerSession } from "next-auth";
import {
  type UseFieldArrayRemove,
  type UseFormRegister,
  type UseFormSetValue,
  useFieldArray,
  useForm,
} from "react-hook-form";
import { type Dispatch, type SetStateAction, useState } from "react";
import Head from "next/head";
import { type GetServerSideProps, type NextPage } from "next";
import { prisma } from "@/server/db";
import { authOptions } from "@/server/auth";
import { appRouter } from "@/server/api/root";

import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { AdminSelectLocation } from "@/components/ui/SelectLocation";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Pagination from "@/components/ui/Pagination";
import DialogWithState from "@/components/DialogWithState";
import DataTable from "@/components/ui/data-table";
import { Loader2, MoreHorizontal, Plus, X } from "lucide-react";

import { getIsAdmin } from "@/lib/utils";
import { api } from "@/utils/api";
import useDebounce from "@/hooks/useDebounce";

import type { Location, Owner } from "@/types/models";
import { type Prisma } from "@prisma/client";
import type { Columns } from "@/types/table";
import { type OwnerequipmentForm } from "@/types/ownerEquipment";

type Equipment = Prisma.EquipmentGetPayload<{
  include: {
    owner: { include: { owner: true; location: true } };
    category: true;
  };
}>;

type CellProps = {
  setShowAddEquipmentModal: Dispatch<SetStateAction<boolean>>;
  setEquipment: Dispatch<SetStateAction<Equipment | null>>;
  setShowStockModal: Dispatch<SetStateAction<boolean>>;
};

const equipmentColumns: Columns<Equipment, CellProps>[] = [
  { title: "Nombre", cell: (rowData) => <div>{rowData.name}</div> },
  { title: "Marca", cell: (rowData) => <div>{rowData.brand}</div> },
  { title: "Model", cell: (rowData) => <div>{rowData.model}</div> },
  { title: "Precio", cell: (rowData) => <div>{rowData.price}</div> },
  {
    title: "Stock",
    cell: (rowData) => {
      return (
        <div className="w-[40px]">
          {rowData.owner.reduce((acc, curr) => acc + curr.stock, 0)}
        </div>
      );
    },
  },
  {
    title: "Sucursal",
    cell: (rowData) => {
      const locations = new Set();
      rowData.owner.map((owner) => locations.add(owner.location.name));

      return <div className="w-[40px]">{Array.from(locations).join(", ")}</div>;
    },
  },
  { title: "Categoría", cell: (rowData) => <div>{rowData.category.name}</div> },
  {
    title: "Disponible",
    cell: (rowData) => {
      return (
        <div className="flex justify-center">
          <Switch defaultChecked={rowData.available} title="habilitado" />
        </div>
      );
    },
  },
  {
    title: "",
    cell: (rowData, cellData) => (
      <ActionsDropMenu
        equipment={rowData}
        setShowAddEquipmentModal={cellData.cellProps?.setShowAddEquipmentModal}
        setEquipment={cellData.cellProps?.setEquipment}
        setShowStockModal={cellData.cellProps?.setShowStockModal}
      />
    ),
  },
];

type Props = {
  locations: Location[];
  owners: Owner[];
};

const EquipmentAdmin: NextPage<Props> = ({ locations, owners }: Props) => {
  const { register, setValue, watch } = useForm<{
    search: string;
    location: string;
  }>();

  const [equipment, setEquipment] = useState<Equipment | null>(null);
  const [showAddEquipmentModal, setShowAddEquipmentModal] = useState(false);
  const [showStockModal, setShowStockModal] = useState(false);

  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 15;

  // const location = useBoundStore((state) => state.location);

  const search = useDebounce(watch("search", ""), 500);
  const location = watch("location");

  const { data } = api.equipment.adminGetEquipment.useQuery({
    take: pageSize,
    skip: (currentPage - 1) * pageSize,
    locationId: location,
    search,
  });

  const cellProps = {
    setShowAddEquipmentModal,
    setEquipment,
    setShowStockModal,
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Equipos</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {equipment && (
        <OwnerLocationStockModal
          isOpen={showStockModal}
          setOpen={setShowStockModal}
          equipment={equipment}
          locations={locations}
          owners={owners}
        />
      )}

      <DialogWithState
        isOpen={showAddEquipmentModal}
        setOpen={setShowAddEquipmentModal}
        title="Agregar equipo"
      >
        <AddEquipment
          equipment={equipment}
          setShowAddEquipmentModal={setShowAddEquipmentModal}
        />
      </DialogWithState>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">Equipos</h1>
          <div className="flex flex-wrap items-start gap-4 pt-6">
            <div className="flex w-full items-center gap-4 rounded-md bg-white p-4 md:w-2/3">
              <Input
                type="search"
                placeholder="buscar por nombre, marca o modelo"
                {...register("search")}
              />
              <Label>Sucursal</Label>
              <AdminSelectLocation
                locations={locations}
                setValue={(e) => setValue("location", e)}
              >
                <SelectItem value="all">Todas</SelectItem>
                <SelectItem value="none">Sin sucursal</SelectItem>
              </AdminSelectLocation>
            </div>
            <div className="ml-auto">
              <Button
                onClick={() => {
                  setEquipment(null);
                  setShowAddEquipmentModal(true);
                }}
                size="sm"
                className="whitespace-nowrap"
              >
                Agregar equipo
              </Button>
            </div>
          </div>
          <div className="pt-6">
            {data?.equipment && (
              <DataTable
                columns={equipmentColumns}
                data={data.equipment}
                setRowData={setEquipment}
                cellProps={cellProps}
              />
            )}

            <Pagination
              totalCount={data?.totalCount ?? 0}
              currentPage={currentPage}
              pageSize={pageSize}
              onPageChange={(page) => setCurrentPage(page as number)}
            />
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

type OwnerLocationStockProps = {
  equipment: Equipment;
  locations: Location[];
  owners: Owner[];
  isOpen: boolean;
  setOpen: Dispatch<SetStateAction<boolean>>;
};

const OwnerLocationStockModal = ({
  equipment,
  locations,
  owners,
  isOpen,
  setOpen,
}: OwnerLocationStockProps) => {
  const {
    register,
    control,
    handleSubmit,
    setValue,
    // formState: { errors },
  } = useForm<OwnerequipmentForm>();
  const { fields, append, remove } = useFieldArray({
    control,
    name: "owner",
  });

  const { mutate, isLoading } =
    api.equipment.createEquipmentOnOwner.useMutation();

  const onSubmit = (data: OwnerequipmentForm) => {
    const ctx = api.useContext();
    const mutateData = {
      owner: data.owner.map((owner) => ({
        ...owner,
        equipmentId: equipment.id,
      })),
    };

    mutate(mutateData, {
      onSuccess: () => {
        ctx.equipment.adminGetEquipment.invalidate();
        setOpen(false);
      },
      onError: (err) => {
        console.error(err);
      },
    });
  };

  return (
    <DialogWithState
      title={`${equipment.name} ${equipment.brand}`}
      description={equipment.model}
      isOpen={isOpen}
      setOpen={setOpen}
    >
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="grid grid-cols-7 gap-4 pb-2 text-sm font-semibold">
          <Label className="col-span-2">Dueño</Label>
          <Label className="col-span-2">Sucursal</Label>
          <Label className="col-span-2">Stock</Label>
        </div>
        <div>
          {equipment.owner?.map((owner) => (
            <div key={owner.id} className="grid grid-cols-7 items-center gap-2">
              <p className="col-span-2 rounded-md border border-input px-3 py-1 text-sm">
                {owner.owner?.name}
              </p>
              <p className="col-span-2 rounded-md border border-input px-3 py-1 text-sm">
                {owner.location.name}
              </p>
              <p className="col-span-2 rounded-md border border-input px-3 py-1 text-sm">
                {owner.stock}
              </p>
              <Button variant="link" className="text-gray-800">
                <X className="h-3 w-3" />
              </Button>
            </div>
          ))}
          <div className="pt-4">
            {fields?.map((field, index) => (
              <FieldArray
                key={field.id}
                remove={remove}
                locations={locations}
                owners={owners}
                register={register}
                setValue={setValue}
                index={index}
              />
            ))}
          </div>
        </div>

        <div className="flex justify-center pt-6">
          <Button
            type="button"
            size="sm"
            variant="ghost"
            onClick={() => append({ ownerId: "", stock: 1, locationId: "" })}
            className="flex items-center gap-2 "
          >
            Agregar dueño <Plus className="h-4 w-4" />
          </Button>
        </div>

        <div className="flex justify-end pt-4">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              "Actualizar"
            )}
          </Button>
        </div>
      </form>
    </DialogWithState>
  );
};

type FieldArrayProps = {
  owners: Owner[];
  locations: Location[];
  register: UseFormRegister<OwnerequipmentForm>;
  index: number;
  setValue: UseFormSetValue<OwnerequipmentForm>;
  remove: UseFieldArrayRemove;
};

const FieldArray = ({
  owners,
  locations,
  register,
  index,
  remove,
  setValue,
}: FieldArrayProps) => {
  return (
    <section className="grid grid-cols-7 items-center gap-2 rounded-md bg-slate-50 p-2">
      <div className="col-span-2">
        <SelectOwner owners={owners} index={index} setValue={setValue} />
      </div>
      <div className="col-span-2">
        <AdminSelectLocation
          locations={locations}
          setValue={(e) => setValue(`owner.${index}.locationId` as const, e)}
          className="h-6"
        />
      </div>
      <Input
        type="text"
        {...register(`owner.${index}.stock` as const, {
          valueAsNumber: true,
        })}
        className="col-span-2 h-6"
      />
      <Button
        variant="link"
        className="text-gray-800"
        onClick={() => remove(index)}
      >
        <X className="h-3 w-3" />
      </Button>
    </section>
  );
};

type SelectOwnerProps = {
  defaultValue?: string;
  owners: Owner[];
  index: number;
  setValue: UseFormSetValue<OwnerequipmentForm>;
};

const SelectOwner = ({
  defaultValue,
  owners,
  index,
  setValue,
}: SelectOwnerProps) => {
  return (
    <Select
      defaultValue={defaultValue}
      onValueChange={(e) => setValue(`owner.${index}.ownerId` as const, e)}
    >
      <SelectTrigger className="h-6">
        <SelectValue placeholder="elegir" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Dueños</SelectLabel>
          {owners.map((owner) => (
            <SelectItem value={owner.id} key={owner.id}>
              {owner.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

type ActionsProps = {
  equipment: Equipment;
  setShowAddEquipmentModal?: Dispatch<SetStateAction<boolean>>;
  setEquipment?: Dispatch<SetStateAction<Equipment | null>>;
  setShowStockModal?: Dispatch<SetStateAction<boolean>>;
};

const ActionsDropMenu = ({
  setEquipment,
  setShowAddEquipmentModal,
  equipment,
  setShowStockModal,
}: ActionsProps) => {
  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="h-8 w-8 p-0">
            <span className="sr-only">Open menu</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuLabel>Acciones</DropdownMenuLabel>
          <DropdownMenuItem
            onClick={() => {
              setEquipment && setEquipment(equipment);
              setShowAddEquipmentModal && setShowAddEquipmentModal(true);
            }}
          >
            Editar equipo
          </DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => {
              setEquipment && setEquipment(equipment);
              setShowStockModal && setShowStockModal(true);
            }}
          >
            Editar stock
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </>
  );
};

type AddEquipmentForm = {
  name: string;
  model: string;
  brand: string;
  price: number;
  image: string;
  categoryId: string;
  accessories: string[];
};

type AddEquipmentProps = {
  equipment: Equipment | null;
  setShowAddEquipmentModal?: Dispatch<SetStateAction<boolean>>;
};

const AddEquipment = ({
  equipment,
  setShowAddEquipmentModal,
}: AddEquipmentProps) => {
  const { register, handleSubmit, setValue } = useForm<AddEquipmentForm>();

  const ctx = api.useContext();
  const { mutate, isLoading } = api.equipment.createEquipment.useMutation();
  const editEquipment = api.equipment.putEquipment.useMutation();

  const onSubmit = (data: AddEquipmentForm) => {
    if (equipment) {
      return editEquipment.mutate(
        { ...data, equipmentId: equipment.id },
        {
          onSuccess: () => {
            void ctx.equipment.adminGetEquipment.invalidate();
            setShowAddEquipmentModal && setShowAddEquipmentModal(false);
          },
        }
      );
    }
    mutate(data, {
      onSuccess: () => {
        void ctx.equipment.adminGetEquipment.invalidate();
        setShowAddEquipmentModal && setShowAddEquipmentModal(false);
      },
    });
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <Label htmlFor="name">Nombre</Label>
        <Input
          type="text"
          id="name"
          {...register("name")}
          defaultValue={equipment?.name}
        />
      </div>

      <div>
        <Label htmlFor="brand">Marca</Label>
        <Input
          type="text"
          id="brand"
          {...register("brand")}
          defaultValue={equipment?.brand}
        />
      </div>

      <div>
        <Label htmlFor="model">Modelo</Label>
        <Input
          type="text"
          id="model"
          {...register("model")}
          defaultValue={equipment?.model}
        />
      </div>

      <div>
        <Label htmlFor="price">Precio</Label>
        <Input
          type="text"
          id="price"
          {...register("price", { valueAsNumber: true })}
          defaultValue={equipment?.price}
        />
      </div>

      <div>
        <Label>Categoría</Label>
        <SelectEquipmentCategory
          setValue={setValue}
          defaultValue={equipment?.categoryId}
        />
      </div>

      <div>
        <Label htmlFor="image">Imagen</Label>
        <Input
          type="text"
          id="image"
          {...register("image")}
          defaultValue={equipment?.image ?? undefined}
        />
      </div>

      <div>
        <Label htmlFor="accessories">Accesorios</Label>
        <Input type="text" id="accessories" {...register("accessories.0")} />
      </div>

      <div className="grid py-6">
        <Button disabled={isLoading}>
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            "Agregar"
          )}
        </Button>
      </div>
    </form>
  );
};

const SelectEquipmentCategory = ({
  setValue,
  defaultValue,
}: {
  setValue: UseFormSetValue<AddEquipmentForm>;
  defaultValue?: string;
}) => {
  const { data } = api.category.getAllCategories.useQuery();

  return (
    <Select
      onValueChange={(e) => setValue("categoryId", e)}
      defaultValue={defaultValue}
    >
      <SelectTrigger>
        <SelectValue placeholder="seleccionar categoría" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Categorías</SelectLabel>
          {data?.map((category) => (
            <SelectItem value={category.id} key={category.id}>
              {category.name}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  const isAdmin = getIsAdmin(session);

  if (!isAdmin) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session },
    transformer: superjason,
  });

  const locations = await prisma.location.findMany({});
  const owners = await prisma.owner.findMany({});

  await helpers.equipment.adminGetEquipment.prefetch({ take: 15, skip: 0 });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      locations,
      owners,
    },
  };
};

export default EquipmentAdmin;
