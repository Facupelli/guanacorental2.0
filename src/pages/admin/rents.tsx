import { UseFormSetValue, useForm } from "react-hook-form";
import dayjs from "dayjs";
import { getServerSession } from "next-auth";
import { authOptions } from "@/server/auth";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";

import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import Nav from "@/components/Nav";
import AdminLayout from "@/components/layout/AdminLayout";
import { Label } from "@/components/ui/label";

import { api } from "@/utils/api";
import { formatPrice, getIsAdmin } from "@/lib/utils";
import { MONTHS, monthList, yearList } from "@/lib/magic_strings";
import { Button } from "@/components/ui/button";

type RentForm = { month: string; year: string };

const AdminRents: NextPage = () => {
  const { setValue, watch } = useForm<RentForm>({
    defaultValues: {
      month: "all",
      year: String(dayjs().year()),
    },
  });

  const year = watch("year");
  const month = watch("month");

  const { data } = api.rent.getTotal.useQuery({
    year,
    month,
  });

  const fetchXlBuffer = () => fetch(`http://localhost:3000/api/excel`);
  const fetch4nodeBuffer = () => fetch(`http://localhost:3000/api/4node`);

  const handleDownloadExcel = () => {
    fetch4nodeBuffer()
      .then((res) => res.blob())
      .then((blob) => {
        if (blob) {
          const url = URL.createObjectURL(blob);
          const link = document.createElement("a");
          link.href = url;
          link.download = `archivo.xlsx`;
          link.click();
          URL.revokeObjectURL(url);
        }
      })
      .catch((err) => console.error(err));
  };

  return (
    <>
      <Head>
        <title>Guanaco Admin | Rentas</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="">
        <AdminLayout>
          <h1 className="text-lg font-bold">RENTAS</h1>
          <div className="grid gap-6 pt-6">
            <section className="flex items-center">
              <div className="flex w-1/2 items-center gap-6 rounded-md bg-white p-4">
                <div className="flex w-full items-center gap-2">
                  <Label>Mes</Label>
                  <SelectMonth setValue={setValue} />
                </div>
                <div className="flex w-full items-center gap-2">
                  <Label>Año</Label>
                  <SelectYear setValue={setValue} />
                </div>
              </div>
              <div className="ml-auto">
                <Button onClick={handleDownloadExcel}>Descargar Excel</Button>
              </div>
            </section>

            <div className="w-fit rounded-md bg-white px-8 py-4">
              <p className="font-semibold text-primary/70">Total</p>
              <p className="text-2xl font-bold">
                {formatPrice(data?.totalFromOrders ?? 0)}
              </p>
            </div>

            <section className="grid w-fit gap-4 rounded-md bg-white px-8 py-4">
              <div className="grid gap-4">
                <p className="font-semibold text-primary/70">Divisón</p>
                <div className="flex gap-12">
                  <div>
                    <p className="text-sm text-primary/70">Federico:</p>
                    <p className="text-xl font-semibold">
                      {formatPrice(data?.splitFromEarnings.federico ?? 0)}
                    </p>
                  </div>

                  <div className="">
                    <p className="text-sm text-primary/70">Oscar:</p>
                    <p className="text-xl font-semibold">
                      {formatPrice(data?.splitFromEarnings.oscar ?? 0)}
                    </p>
                  </div>

                  <div className="">
                    <p className="text-sm text-primary/70">Subalquiler:</p>
                    <p className="text-xl font-semibold">
                      {formatPrice(data?.splitFromEarnings.sub ?? 0)}
                    </p>
                  </div>
                </div>
              </div>

              <div className="place-self-end pt-4">
                <p className="text-xs font-semibold text-primary/70">
                  Total División
                </p>
                <p className="text-base">
                  {formatPrice(data?.totalFromEarnings ?? 0)}
                </p>
              </div>
            </section>
          </div>
        </AdminLayout>
      </main>
    </>
  );
};

type SelectProps = {
  setValue: UseFormSetValue<RentForm>;
};

const SelectMonth = ({ setValue }: SelectProps) => {
  return (
    <Select onValueChange={(e) => setValue("month", e)}>
      <SelectTrigger>
        <SelectValue placeholder="elegir mes" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Mes</SelectLabel>
          <SelectItem value="all">Todos</SelectItem>
          {monthList.map((month) => (
            <SelectItem value={MONTHS[month] ?? "all"} key={month}>
              {month}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

const SelectYear = ({ setValue }: SelectProps) => {
  return (
    <Select
      onValueChange={(e) => setValue("year", e)}
      defaultValue={String(dayjs().year())}
    >
      <SelectTrigger>
        <SelectValue placeholder="elegir año" />
      </SelectTrigger>
      <SelectContent>
        <SelectGroup>
          <SelectLabel>Año</SelectLabel>
          <SelectItem value="all">Todos</SelectItem>
          {yearList.map((year) => (
            <SelectItem value={year} key={year}>
              {year}
            </SelectItem>
          ))}
        </SelectGroup>
      </SelectContent>
    </Select>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  const isAdmin = getIsAdmin(session);

  if (!isAdmin) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  const { user } = session;

  return {
    props: {
      user,
    },
  };
};

export default AdminRents;
