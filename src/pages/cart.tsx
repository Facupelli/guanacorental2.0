import Head from "next/head";
import Nav from "@/components/Nav";

import { useBoundStore } from "@/zustand/store";
import { formatPrice, isEquipmentAvailable } from "@/lib/utils";
import { useMemo, useState } from "react";
import { useSession } from "next-auth/react";

import { Button } from "@/components/ui/button";
import SelectDateButton from "@/components/ui/SelectDateButton";
import DialogWithState from "@/components/DialogWithState";
import { DialogFooter } from "@/components/ui/dialog";
import CartItemCounter from "@/components/CartItemCounter";
import { X } from "lucide-react";

import { getDatesInRange, getTotalWorkingDays } from "@/lib/dates";
import { api } from "@/utils/api";

import { type NextPage } from "next";
import type { Equipment, Location } from "@/types/models";
import { type UseFormRegister, useForm } from "react-hook-form";
import { Textarea } from "@/components/ui/textarea";

const CartPage: NextPage = () => {
  const { data: session } = useSession();
  const { register, getValues } = useForm<{ message: string }>();

  const [showErrorModal, setErrorModal] = useState(false);
  const [error, setError] = useState("");

  const cartItems = useBoundStore((state) => state.cartItems);

  const startDate = useBoundStore((state) => state.startDate);
  const endDate = useBoundStore((state) => state.endDate);
  const location = useBoundStore((state) => state.location);
  const pickupHour = useBoundStore((state) => state.pickupHour);

  const { mutate, isLoading } = api.order.createOrder.useMutation();

  const workingDays = useMemo(() => {
    if (startDate && endDate) {
      const datesInRange = getDatesInRange(startDate, endDate);
      return getTotalWorkingDays(datesInRange, pickupHour);
    }
    return undefined;
  }, [startDate, endDate, pickupHour]);

  const cartTotal = useMemo(() => {
    const cartSum = cartItems.reduce(
      (acc, curr) => acc + curr.price * curr.quantity,
      0
    );
    if (workingDays) {
      return workingDays * cartSum;
    }
    return 0;
  }, [workingDays, cartItems]);

  const handleBookOrder = () => {
    const message = getValues("message");

    const cart = cartItems.map((item) => ({
      id: item.id,
      quantity: item.quantity,
      price: item.price,
      owner: item.owner?.map((owner) => ({
        id: owner.id,
        ownerId: owner.ownerId,
        onwerName: owner.owner?.name,
        stock: owner.stock,
        locationId: owner.locationId,
      })),
    }));

    if (startDate && endDate && session?.user && workingDays) {
      mutate(
        {
          startDate,
          endDate,
          locationId: location.id,
          customerId: session.user.id,
          pickupHour,
          subtotal: cartTotal,
          total: cartTotal,
          message,
          cart,
          workingDays,
        },
        {
          onSuccess: (data) => {
            console.log(data);
          },
          onError: (err) => {
            setErrorModal(true);
            setError(err.message);
          },
        }
      );
    }
  };

  return (
    <>
      <Head>
        <title>Guanaco Rental</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo-favicon.ico" />
      </Head>

      <DialogWithState
        title="Ocurrió un error"
        isOpen={showErrorModal}
        setOpen={setErrorModal}
      >
        <p>{error}</p>
        <DialogFooter>
          <Button
            onClick={() => {
              setErrorModal(false);
              setError("");
            }}
          >
            ACEPTAR
          </Button>
        </DialogFooter>
      </DialogWithState>

      <Nav />

      <main className="min-h-screen bg-app-bg px-6 pt-[70px]">
        <section className="mt-12 grid grid-cols-12 gap-8">
          <section className="col-span-8 ">
            <div className="grid grid-cols-12 pb-6">
              <p className="col-span-7">Equipos</p>
              <p className="col-span-2">Cantidad</p>
              <p className="col-span-2">Precio</p>
            </div>
            <ItemsList
              items={cartItems}
              startDate={startDate}
              endDate={endDate}
            />
          </section>
          <RightBar
            location={location}
            pickupHour={pickupHour}
            cartTotal={cartTotal}
            register={register}
            handleBookOrder={handleBookOrder}
            isLoading={isLoading}
            cart={cartItems}
          />
        </section>
      </main>
    </>
  );
};

type ItemsListProps = {
  items: Equipment[];
  startDate: Date | null;
  endDate: Date | null;
};
const ItemsList = ({ items, startDate, endDate }: ItemsListProps) => {
  return (
    <div className="grid gap-8">
      {items?.map((item) => (
        <Item
          key={item.id}
          item={item}
          startDate={startDate}
          endDate={endDate}
        />
      ))}
    </div>
  );
};

type ItemProps = {
  item: Equipment;
  startDate: Date | null;
  endDate: Date | null;
};

const Item = ({ item, endDate, startDate }: ItemProps) => {
  const deleteFromCart = useBoundStore((state) => state.deleteFromCart);

  const available = isEquipmentAvailable(item, { startDate, endDate });

  return (
    <div className="grid grid-cols-12 items-center">
      <p className="col-span-7">
        <strong className="font-extrabold">
          {item.name} {item.brand}
        </strong>{" "}
        <strong className="font-semibold">{item.model}</strong>
      </p>
      <div className="col-span-2">
        <CartItemCounter item={item} />
      </div>
      <p className="col-span-2 text-lg font-semibold">
        {formatPrice(item.price * item.quantity)}
      </p>
      <button onClick={() => deleteFromCart(item.id)}>
        <X className="col-span-1 h-4 w-4" />
      </button>
      <p className={`text-sm ${available ? "text-green-500" : "text-red-500"}`}>
        {available ? "Disponible" : "Reservado"}
      </p>
    </div>
  );
};

type RightBarProps = {
  cartTotal: number;
  location: Location;
  pickupHour: string;
  register: UseFormRegister<{ message: string }>;
  handleBookOrder: () => void;
  isLoading: boolean;
  cart: Equipment[];
};

const RightBar = ({
  cartTotal,
  location,
  pickupHour,
  register,
  handleBookOrder,
  isLoading,
  cart,
}: RightBarProps) => {
  const startDate = useBoundStore((state) => state.startDate);
  const endDate = useBoundStore((state) => state.endDate);

  const areAllItemsAvailable = cart.every((item) =>
    isEquipmentAvailable(item, { startDate, endDate })
  );

  return (
    <section className="col-span-4 rounded-md bg-white p-4">
      <div className="grid gap-6">
        {startDate && endDate && (
          <div className="grid w-full gap-2">
            <div className="flex w-full justify-between ">
              <p className="font-semibold">Retiro:</p>
              <p className="font-bold">
                {new Date(startDate).toLocaleDateString()} {pickupHour}hs
              </p>
            </div>
            <div className="flex justify-between">
              <p className="font-semibold">Devolución: </p>
              <p className="font-bold">
                {new Date(endDate).toLocaleDateString()} 09:00hs
              </p>
            </div>
          </div>
        )}

        <SelectDateButton />
        <Button variant="secondary">Continuar Alquilando</Button>

        <Textarea
          placeholder="Algo que nos quieras decir?"
          {...register("message")}
        />

        <div className="grid gap-3">
          <div className="flex items-center justify-between font-semibold">
            <p>Sucursal:</p>
            <p>{location.name}</p>
          </div>
          <div className="flex items-center justify-between font-semibold">
            <p>Subtotal:</p>
            {(startDate || endDate) && (
              <p className="font-semibold">{formatPrice(cartTotal)}</p>
            )}
          </div>
          <div className="flex items-center justify-between font-semibold">
            <p>Total:</p>

            <p className="text-xl font-extrabold">{formatPrice(cartTotal)}</p>
          </div>
        </div>

        <div className="grid gap-2">
          <Button
            disabled={
              !startDate || !endDate || isLoading || !areAllItemsAvailable
            }
            onClick={handleBookOrder}
          >
            {!startDate || !endDate
              ? "Selecciona una fecha para alquilar!"
              : "Agendar Pedido"}
          </Button>
        </div>
      </div>
    </section>
  );
};

export default CartPage;
