// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id                  String   @id @default(cuid())
  sessionToken        String   @unique
    userId              String
    expires             DateTime
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String    @id @default(cuid())
    name                 String?
    email                String?   @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]

    petition_sent        Boolean    @default(false)
    customer_approved    Boolean?   @default(false)
    address              Address?   @relation(fields: [addressId], references: [id])
    addressId            String?    @unique
    orders               Order[]
    carts                Cart[]
    role                 Role[]
}

model VerificationToken {
    identifier String
    token      String       @unique
    expires    DateTime

    @@unique([identifier, token])
}

// USERS

model Address {
  id                String      @default(cuid()) @id
  customer          User?
  full_name         String
  phone             String     @unique
  province          String
  city              String
  postal_code       String?
  address_1         String
  address_2         String?
  dni_number        String
  birth_date        String?
  occupation        String
  company           String?
  student           Boolean?
  employee          Boolean?
  bussines_name     String?
  cuit              String?
  contact_1         String @default("en db vieja")
  contact_2         String @default("en db vieja")
  bond_1            String @default("en db vieja")
  bond_2            String @default("en db vieja")
  bank              String
  alias             String
  cbu               String
  dni_front         String @default("en db vieja")
  dni_back          String @default("en db vieja")

  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model Role {
  id                String      @default(cuid()) @id
  name              String
  users             User[]
}

// RENTAL

model Category {
  id                      String       @default(cuid()) @id
  name                    String
  equipments              Equipment[]
  order                   Int          @default(1)
}

// model Schedule {
//   id            String      @default(cuid()) @id
//   hour          String
//   locations     Location[]
// }

model Location {
  id            String      @default(cuid()) @id
  name          String
  equipments    EquipmentOnOwner[]
  orders        Order[]
  discounts     Discount[]
  // schedules     Schedule[]
}

model OrderStatus {
  name      String     @unique
}

model Owner {
  id                      String              @default(cuid()) @id
  name                    String
  equipments              EquipmentOnOwner[]
}

model EquipmentOnOwner {
  id                      String              @default(cuid()) @id
  stock                   Int
  books                   BookOnEquipment[]
  orders                  Order[]
  equipment               Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId             String 
  owner                   Owner               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                 String 
  location                Location            @relation(fields: [locationId], references: [id])
  locationId              String              
  deleted                 Boolean             @default(false)
  created_at              DateTime            @default(now())

  // @@id([equipmentId, ownerId, locationId])
}

model Equipment {
  id                  String              @default(cuid()) @id
  carts               Cart[]
  name                String
  brand               String
  model               String
  image               String?
  quantity            Int                 @default(1)
  price               Int
  accessories         String[]
  category            Category            @relation(fields: [categoryId], references: [id])
  categoryId          String 
  owner               EquipmentOnOwner[]
  available           Boolean             @default(true)
  deleted             Boolean             @default(false)
}

model Book {
  id             String              @default(cuid()) @id
  start_date     DateTime
  end_date       DateTime
  pickup_hour    String?
  return_hour    String?
  working_days    Float 
  equipments     BookOnEquipment[]
  order          Order?
}

model BookOnEquipment {
  equipment         EquipmentOnOwner       @relation(fields: [equipmentId], references: [id])
  equipmentId       String
  book              Book                   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId            String
  quantity          Int
  created_at        DateTime               @default(now())

  @@id([equipmentId, bookId])
}

model Cart {
  id              String       @default(cuid()) @id
  // order           Order?   
  customer        User         @relation(fields: [customerId], references: [id])
  customerId      String
  equipments      Equipment[]
  subtotal        Int
  total           Int

  created_at      DateTime     @default(now())
  updated_at       DateTime    @updatedAt
}

model Order {
  id                String                @default(cuid()) @id
  number            Int                   @default(autoincrement())
  customer          User                  @relation(fields: [customerId], references: [id])
  customerId        String
  book              Book                  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId            String                @unique
  location          Location              @relation(fields: [locationId], references: [id])
  locationId        String
  equipments        EquipmentOnOwner[]
  deliver_status    String
  return_status     String
  earning           Earning?             
  discount          Discount?             @relation(fields: [discount_id], references: [id])
  discount_id       String?
  // cart            Cart?                 @relation(fields: [cartId], references: [id])
  // cartId          String?               @unique
  subtotal          Int
  total             Int
  message           String?

  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt

}

model Earning {
  id              String                @default(cuid()) @id
  oscar           Float
  federico        Float
  sub             Float
  order           Order                 @relation(fields: [orderId], references: [id])
  orderId         String              @unique
}

model DiscountType {
  id              String                @default(cuid()) @id
  name            String
  discounts       DiscountRule[]
}

model Discount {
  id                String                @default(cuid()) @id
  code              String          @unique
  rule              DiscountRule    @relation(fields: [rule_id], references: [id])
  rule_id           String          @unique
  ends_at           DateTime?
  starts_at         DateTime?
  is_disabled       Boolean
  location          Location[]
  usage_count       Int
  usage_limit       Int?
  orders            Order[]
  min_total         Int?
  
  created_at        DateTime            @default(now())
}


model DiscountRule {
  id                String                @default(cuid()) @id
  discount          Discount?
  type              DiscountType        @relation(fields: [type_id], references: [id])
  type_id           String
  value             Int
  description       String?

  created_at        DateTime  @default(now())
}
